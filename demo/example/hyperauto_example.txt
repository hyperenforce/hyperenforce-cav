#
#
#
"""
A hyper automaton: Forall Forall, observational determinism on controllable con_y
"""
# Plant output type
# Forall quantifier

pt_enc = DataTypeEncoding(pt)
quants = (2,)
h = SymbolicHyperAutomaton(quants, pt, pt_enc)

true_form = lambda v1, v2: TRUE

mon_differ = lambda v1, v2: NOT(pt_enc.same_var_form(v1, v2, 'con_y'))
mon_same = lambda v1, v2: (pt_enc.same_var_form(v1, v2, 'con_y'))
wait_outputs = lambda v1, v2: NOT(OR(pt_enc.encodes_var_form(v1, PC='20'),pt_enc.encodes_var_form(v2, PC='20')))
end_condition = lambda v1, v2: AND(pt_enc.same_var_form(v1, v2, 'con_y'), AND(pt_enc.encodes_var_form(v1, PC='20'),pt_enc.encodes_var_form(v2, PC='20')))


h.add_vertices(3, )
h.initial_state_indices = [0]
h.vs["marked"] = True

h.add_edge(0, 1, true_form)

# h.add_edge(1, 1, mon_differ)
# h.add_edge(1, 2, mon_same)
h.add_edge(1, 2, wait_outputs)
h.add_edge(2, 2, wait_outputs)
h.add_edge(2, 2, end_condition)
