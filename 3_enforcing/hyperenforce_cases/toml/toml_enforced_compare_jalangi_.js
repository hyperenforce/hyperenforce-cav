J$.iids = {"8":[25,13,25,25],"9":[5,24,5,26],"10":[25,13,25,25],"17":[5,24,5,26],"18":[25,27,25,30],"25":[5,24,5,26],"33":[6,21,6,23],"34":[25,27,25,30],"41":[6,21,6,23],"42":[87,46,87,74],"49":[6,21,6,23],"50":[87,23,87,75],"57":[7,12,7,14],"58":[91,40,91,69],"65":[7,12,7,14],"66":[91,20,91,70],"73":[7,1,7,15],"74":[97,19,97,37],"81":[10,10,13,2],"82":[98,22,98,58],"89":[10,10,13,2],"90":[98,22,98,77],"97":[10,10,13,2],"98":[99,23,99,56],"105":[10,10,13,2],"106":[99,23,99,78],"113":[10,10,13,2],"114":[103,29,103,67],"121":[10,1,13,2],"122":[103,27,103,86],"129":[16,15,16,16],"137":[16,15,16,16],"145":[16,15,16,16],"153":[17,24,17,25],"161":[17,24,17,25],"169":[17,24,17,25],"177":[18,27,18,28],"185":[18,27,18,28],"193":[18,27,18,28],"201":[19,22,19,23],"209":[19,22,19,23],"217":[19,22,19,23],"225":[20,27,20,28],"233":[20,27,20,28],"241":[20,27,20,28],"249":[21,9,21,13],"257":[21,9,21,19],"259":[21,9,21,17],"265":[21,9,21,19],"273":[21,1,21,20],"281":[25,10,25,11],"289":[25,10,25,11],"297":[25,13,25,14],"305":[25,18,25,25],"321":[25,27,25,28],"329":[25,27,25,30],"345":[26,20,26,31],"353":[26,20,26,31],"361":[26,1,26,31],"369":[85,19,85,23],"377":[85,19,85,29],"379":[85,19,85,27],"385":[85,19,85,29],"393":[85,1,85,29],"401":[86,20,86,25],"409":[86,20,86,25],"417":[86,1,86,25],"425":[87,23,87,42],"433":[87,46,87,50],"441":[87,46,87,56],"443":[87,46,87,54],"449":[87,59,87,74],"457":[87,23,87,75],"465":[87,1,87,75],"473":[89,20,89,24],"481":[89,20,89,30],"483":[89,20,89,28],"489":[89,20,89,30],"497":[89,1,89,30],"505":[90,20,90,26],"513":[90,27,90,40],"521":[90,20,90,41],"529":[90,20,90,41],"537":[90,1,90,41],"545":[91,20,91,36],"553":[91,40,91,44],"561":[91,40,91,50],"563":[91,40,91,48],"569":[91,53,91,69],"577":[91,20,91,70],"585":[91,1,91,70],"593":[97,19,97,23],"601":[97,19,97,29],"603":[97,19,97,27],"609":[97,32,97,37],"617":[97,19,97,37],"625":[97,1,97,38],"633":[98,22,98,36],"641":[98,39,98,58],"649":[98,61,98,77],"657":[98,22,98,77],"665":[98,1,98,78],"673":[99,23,99,37],"681":[99,40,99,56],"689":[99,59,99,78],"697":[99,23,99,78],"705":[99,1,99,79],"713":[101,1,101,8],"721":[101,57,101,74],"729":[101,1,101,81],"731":[101,1,101,12],"737":[101,1,101,82],"745":[102,1,102,8],"753":[102,57,102,75],"761":[102,1,102,82],"763":[102,1,102,12],"769":[102,1,102,83],"777":[103,1,103,8],"785":[103,29,103,46],"793":[103,49,103,67],"801":[103,77,103,78],"809":[103,28,103,79],"811":[103,28,103,76],"817":[103,83,103,86],"825":[103,1,103,92],"827":[103,1,103,12],"833":[103,1,103,93],"841":[1,1,4100,1],"849":[1,1,4100,1],"857":[1,1,4100,1],"865":[1,1,4100,1],"873":[1,1,4100,1],"881":[1,1,4100,1],"889":[1,1,4100,1],"897":[1,1,4100,1],"905":[1,1,4100,1],"913":[1,1,4100,1],"921":[10,10,13,2],"929":[10,10,13,2],"937":[25,1,96,2],"945":[25,1,96,2],"953":[25,1,96,2],"961":[1,1,4100,1],"969":[1,1,4100,1],"nBranches":2,"originalCodeFileName":"/Users/tzuhan/+research/hyper_enforce/HyperEnforce/3_enforcing/hyperenforce_cases/toml/toml_enforced_compare.js","instrumentedCodeFileName":"/Users/tzuhan/+research/hyper_enforce/HyperEnforce/3_enforcing/hyperenforce_cases/toml/toml_enforced_compare_jalangi_.js","code":"// var S$ = require('S$')\r\n// Program starts with no pollution, i.e.,\r\n// {}.polluted == undefined\r\n/* SYMBOLIC VARS */\r\nvar con_str_polluted = '';\r\nvar ucon_str_toml = '';\r\ntoml_str = '';\r\n//toml_str = \"[clean]\\npolluted = \\\"yes\\\"\\n\"\r\n/* added functions by the controller */\r\nsupp_0 = function (ucon_str_toml) {\r\n  // console.log('decide to suppress or not')\r\n  // total_time = total_time + (Date.now() - t0)\r\n}\r\n\r\nvar i\r\nvar counter = 0;\r\nvar total_monitoring = 0;\r\nvar total_no_monitoring = 0;\r\nvar total_exectime = 0;\r\nvar normalized_overhead = 0;\r\nstart = Date.now();\r\n\r\n\r\n\r\nfor (i = 1; i <= 1000000; i++) {\r\ncon_str_polluted = 'undefined'\r\n//\r\nvar node;\r\n// var i;\r\n// for (i = 0; i < nodes.length; i++) {\r\n// \t\tnode = nodes[i];\r\n// \t\tswitch (node.type) {\r\n// \t\t\tcase \"Assign\":\r\n// \t\t\t\tvar key = node.key;\r\n// \t\t\t\tvar value = node.value;\r\n// \t\t\t\tvar line = node.line;\r\n// \t\t\t\tvar column = node.column;\r\n//\r\n// \t\t\t\tvar fullPath;\r\n// \t\t\t\tif (currentPath) {\r\n// \t\t\t\t\tfullPath = currentPath + \".\" + key;\r\n// \t\t\t\t} else {\r\n// \t\t\t\t\tfullPath = key;\r\n// \t\t\t\t}\r\n// \t\t\t\tif (typeof context[key] !== \"undefined\") {\r\n// \t\t\t\t\tgenError(\"Cannot redefine existing key '\" + fullPath + \"'.\", line, column);\r\n// \t\t\t\t}\r\n//\r\n// \t\t\t\tif (value.type === \"Array\") {\r\n// \t\t      // return reduceArrayWithTypeChecking(node.value);\r\n// \t\t    } else if (value.type === \"InlineTable\") {\r\n// \t\t      // return reduceInlineTableNode(value.value);\r\n// \t\t    } else {\r\n// \t\t      // return node.value;\r\n// \t\t\t\t\tcontext[key] = value.value\r\n// \t\t    }\r\n//\r\n// \t\t\t\t// context[key] = reduceValueNode(value);\r\n//\r\n// \t\t\t\tif (!pathAssigned(fullPath)) {\r\n// \t\t\t\t\tassignedPaths.push(fullPath);\r\n// \t\t\t\t\tvalueAssignments.push(fullPath);\r\n// \t\t\t\t}\r\n// \t\t\t\tbreak;\r\n// \t\tcase \"ObjectPath\":\r\n// \t\t\t\tvar path = node.value;\r\n// \t\t\t\tvar quotedPath = path.map(quoteDottedString).join(\".\");\r\n// \t\t\t\tvar line = node.line;\r\n// \t\t\t\tvar column = node.column;\r\n//\r\n// \t\t\t\tif (assignedPaths.indexOf(path) !== -1) {\r\n// \t\t\t\t\tgenError(\"Cannot redefine existing key '\" + path + \"'.\", line, column);\r\n// \t\t\t\t}\r\n// \t\t\t\tassignedPaths.push(quotedPath);\r\n// \t\t\t\tcontext = deepRef(data, path, {}, line, column);\r\n// \t\t\t\tcurrentPath = path;\r\n// \t\t\t// setPath(node);\r\n// \t\t\tbreak;\r\n// \t\tcase \"ArrayPath\":\r\n// \t\t\t// addTableArray(node);\r\n// \t\t\tbreak;\r\n// \t\t}\r\n// }\r\n// // if(!supp_0){\r\nnomonitor_time0 = Date.now()\r\ncon_str_polluted = 'yes'\r\ntotal_no_monitoring = total_no_monitoring + (Date.now() - nomonitor_time0)\r\n\r\nmonitoring_time0 = Date.now()\r\ncon_str_polluted = supp_0(ucon_str_toml)\r\ntotal_monitoring = total_monitoring + (Date.now() - monitoring_time0)\r\n// }\r\n\r\n\t/* END OF PROGRAM */\r\n\r\n}\r\ntotal_exectime = (Date.now() - start)\r\ntotal_w_enforcing = (total_exectime - total_no_monitoring + total_monitoring)\r\ntotal_wo_enforcing = (total_exectime - total_monitoring + total_no_monitoring)\r\n\r\nconsole.log(`Total execution time w/ enforcing:  X1 = ${total_w_enforcing } ms`);\r\nconsole.log(`Total execution time w/o enforcing: X2 = ${total_wo_enforcing } ms`);\r\nconsole.log(`overhead = ${((total_w_enforcing / total_wo_enforcing).toFixed(4)) * 100} %` );\r\n// console.log(`Normalized overhead should be something like: ((X - X_min) / (X_max - X_min)) * 100`);\r\n\r\n\r\n//=========================================================================================\r\n\r\n// parse and compile from https://github.com/BinaryMuse/toml-node/tree/master\r\n// Simplified syntax by replacing errors/throws with returning null and replacing modules with plain functions\r\n// Also Object.create(null) was replaced with {} to ensure pollution occurs\r\n// //\r\n// function parse(input) {\r\n// \tvar options = arguments.length > 1 ? arguments[1] : {},\r\n//\r\n// \t\tpeg$FAILED = {},\r\n//\r\n// \t\tpeg$startRuleFunctions = { start: peg$parsestart },\r\n// \t\tpeg$startRuleFunction  = peg$parsestart,\r\n//\r\n// \t\tpeg$c0 = [],\r\n// \t\tpeg$c1 = function() { return nodes },\r\n// \t\tpeg$c2 = peg$FAILED,\r\n// \t\tpeg$c3 = \"#\",\r\n// \t\tpeg$c4 = { type: \"literal\", value: \"#\", description: \"\\\"#\\\"\" },\r\n// \t\tpeg$c5 = void 0,\r\n// \t\tpeg$c6 = { type: \"any\", description: \"any character\" },\r\n// \t\tpeg$c7 = \"[\",\r\n// \t\tpeg$c8 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\r\n// \t\tpeg$c9 = \"]\",\r\n// \t\tpeg$c10 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\r\n// \t\tpeg$c11 = function(name) { addNode(node('ObjectPath', name, line, column)) },\r\n// \t\tpeg$c12 = function(name) { addNode(node('ArrayPath', name, line, column)) },\r\n// \t\tpeg$c13 = function(parts, name) { return parts.concat(name) },\r\n// \t\tpeg$c14 = function(name) { return [name] },\r\n// \t\tpeg$c15 = function(name) { return name },\r\n// \t\tpeg$c16 = \".\",\r\n// \t\tpeg$c17 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\r\n// \t\tpeg$c18 = \"=\",\r\n// \t\tpeg$c19 = { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\r\n// \t\tpeg$c20 = function(key, value) { addNode(node('Assign', value, line, column, key)) },\r\n// \t\tpeg$c21 = function(chars) { return chars.join('') },\r\n// \t\tpeg$c22 = function(node) { return node.value },\r\n// \t\tpeg$c23 = \"\\\"\\\"\\\"\",\r\n// \t\tpeg$c24 = { type: \"literal\", value: \"\\\"\\\"\\\"\", description: \"\\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\"\" },\r\n// \t\tpeg$c25 = null,\r\n// \t\tpeg$c26 = function(chars) { return node('String', chars.join(''), line, column) },\r\n// \t\tpeg$c27 = \"\\\"\",\r\n// \t\tpeg$c28 = { type: \"literal\", value: \"\\\"\", description: \"\\\"\\\\\\\"\\\"\" },\r\n// \t\tpeg$c29 = \"'''\",\r\n// \t\tpeg$c30 = { type: \"literal\", value: \"'''\", description: \"\\\"'''\\\"\" },\r\n// \t\tpeg$c31 = \"'\",\r\n// \t\tpeg$c32 = { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\r\n// \t\tpeg$c33 = function(char) { return char },\r\n// \t\tpeg$c34 = function(char) { return char},\r\n// \t\tpeg$c35 = \"\\\\\",\r\n// \t\tpeg$c36 = { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\r\n// \t\tpeg$c37 = function() { return '' },\r\n// \t\tpeg$c38 = \"e\",\r\n// \t\tpeg$c39 = { type: \"literal\", value: \"e\", description: \"\\\"e\\\"\" },\r\n// \t\tpeg$c40 = \"E\",\r\n// \t\tpeg$c41 = { type: \"literal\", value: \"E\", description: \"\\\"E\\\"\" },\r\n// \t\tpeg$c42 = function(left, right) { return node('Float', parseFloat(left + 'e' + right), line, column) },\r\n// \t\tpeg$c43 = function(text) { return node('Float', parseFloat(text), line, column) },\r\n// \t\tpeg$c44 = \"+\",\r\n// \t\tpeg$c45 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\r\n// \t\tpeg$c46 = function(digits) { return digits.join('') },\r\n// \t\tpeg$c47 = \"-\",\r\n// \t\tpeg$c48 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\r\n// \t\tpeg$c49 = function(digits) { return '-' + digits.join('') },\r\n// \t\tpeg$c50 = function(text) { return node('Integer', parseInt(text, 10), line, column) },\r\n// \t\tpeg$c51 = \"true\",\r\n// \t\tpeg$c52 = { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\r\n// \t\tpeg$c53 = function() { return node('Boolean', true, line, column) },\r\n// \t\tpeg$c54 = \"false\",\r\n// \t\tpeg$c55 = { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\r\n// \t\tpeg$c56 = function() { return node('Boolean', false, line, column) },\r\n// \t\tpeg$c57 = function() { return node('Array', [], line, column) },\r\n// \t\tpeg$c58 = function(value) { return node('Array', value ? [value] : [], line, column) },\r\n// \t\tpeg$c59 = function(values) { return node('Array', values, line, column) },\r\n// \t\tpeg$c60 = function(values, value) { return node('Array', values.concat(value), line, column) },\r\n// \t\tpeg$c61 = function(value) { return value },\r\n// \t\tpeg$c62 = \",\",\r\n// \t\tpeg$c63 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\r\n// \t\tpeg$c64 = \"{\",\r\n// \t\tpeg$c65 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\r\n// \t\tpeg$c66 = \"}\",\r\n// \t\tpeg$c67 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\r\n// \t\tpeg$c68 = function(values) { return node('InlineTable', values, line, column) },\r\n// \t\tpeg$c69 = function(key, value) { return node('InlineTableValue', value, line, column, key) },\r\n// \t\tpeg$c70 = function(digits) { return \".\" + digits },\r\n// \t\tpeg$c71 = function(date) { return  date.join('') },\r\n// \t\tpeg$c72 = \":\",\r\n// \t\tpeg$c73 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\r\n// \t\tpeg$c74 = function(time) { return time.join('') },\r\n// \t\tpeg$c75 = \"T\",\r\n// \t\tpeg$c76 = { type: \"literal\", value: \"T\", description: \"\\\"T\\\"\" },\r\n// \t\tpeg$c77 = \"Z\",\r\n// \t\tpeg$c78 = { type: \"literal\", value: \"Z\", description: \"\\\"Z\\\"\" },\r\n// \t\tpeg$c79 = function(date, time) { return node('Date', new Date(date + \"T\" + time + \"Z\"), line, column) },\r\n// \t\tpeg$c80 = function(date, time) { return node('Date', new Date(date + \"T\" + time), line, column) },\r\n// \t\tpeg$c81 = /^[ \\t]/,\r\n// \t\tpeg$c82 = { type: \"class\", value: \"[ \\\\t]\", description: \"[ \\\\t]\" },\r\n// \t\tpeg$c83 = \"\\n\",\r\n// \t\tpeg$c84 = { type: \"literal\", value: \"\\n\", description: \"\\\"\\\\n\\\"\" },\r\n// \t\tpeg$c85 = \"\\r\",\r\n// \t\tpeg$c86 = { type: \"literal\", value: \"\\r\", description: \"\\\"\\\\r\\\"\" },\r\n// \t\tpeg$c87 = /^[0-9a-f]/i,\r\n// \t\tpeg$c88 = { type: \"class\", value: \"[0-9a-f]i\", description: \"[0-9a-f]i\" },\r\n// \t\tpeg$c89 = /^[0-9]/,\r\n// \t\tpeg$c90 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\r\n// \t\tpeg$c91 = \"_\",\r\n// \t\tpeg$c92 = { type: \"literal\", value: \"_\", description: \"\\\"_\\\"\" },\r\n// \t\tpeg$c93 = function() { return \"\" },\r\n// \t\tpeg$c94 = /^[A-Za-z0-9_\\-]/,\r\n// \t\tpeg$c95 = { type: \"class\", value: \"[A-Za-z0-9_\\\\-]\", description: \"[A-Za-z0-9_\\\\-]\" },\r\n// \t\tpeg$c96 = function(d) { return d.join('') },\r\n// \t\tpeg$c97 = \"\\\\\\\"\",\r\n// \t\tpeg$c98 = { type: \"literal\", value: \"\\\\\\\"\", description: \"\\\"\\\\\\\\\\\\\\\"\\\"\" },\r\n// \t\tpeg$c99 = function() { return '\"'  },\r\n// \t\tpeg$c100 = \"\\\\\\\\\",\r\n// \t\tpeg$c101 = { type: \"literal\", value: \"\\\\\\\\\", description: \"\\\"\\\\\\\\\\\\\\\\\\\"\" },\r\n// \t\tpeg$c102 = function() { return '\\\\' },\r\n// \t\tpeg$c103 = \"\\\\b\",\r\n// \t\tpeg$c104 = { type: \"literal\", value: \"\\\\b\", description: \"\\\"\\\\\\\\b\\\"\" },\r\n// \t\tpeg$c105 = function() { return '\\b' },\r\n// \t\tpeg$c106 = \"\\\\t\",\r\n// \t\tpeg$c107 = { type: \"literal\", value: \"\\\\t\", description: \"\\\"\\\\\\\\t\\\"\" },\r\n// \t\tpeg$c108 = function() { return '\\t' },\r\n// \t\tpeg$c109 = \"\\\\n\",\r\n// \t\tpeg$c110 = { type: \"literal\", value: \"\\\\n\", description: \"\\\"\\\\\\\\n\\\"\" },\r\n// \t\tpeg$c111 = function() { return '\\n' },\r\n// \t\tpeg$c112 = \"\\\\f\",\r\n// \t\tpeg$c113 = { type: \"literal\", value: \"\\\\f\", description: \"\\\"\\\\\\\\f\\\"\" },\r\n// \t\tpeg$c114 = function() { return '\\f' },\r\n// \t\tpeg$c115 = \"\\\\r\",\r\n// \t\tpeg$c116 = { type: \"literal\", value: \"\\\\r\", description: \"\\\"\\\\\\\\r\\\"\" },\r\n// \t\tpeg$c117 = function() { return '\\r' },\r\n// \t\tpeg$c118 = \"\\\\U\",\r\n// \t\tpeg$c119 = { type: \"literal\", value: \"\\\\U\", description: \"\\\"\\\\\\\\U\\\"\" },\r\n// \t\tpeg$c120 = function(digits) { return convertCodePoint(digits.join('')) },\r\n// \t\tpeg$c121 = \"\\\\u\",\r\n// \t\tpeg$c122 = { type: \"literal\", value: \"\\\\u\", description: \"\\\"\\\\\\\\u\\\"\" },\r\n//\r\n// \t\tpeg$currPos          = 0,\r\n// \t\tpeg$reportedPos      = 0,\r\n// \t\tpeg$cachedPos        = 0,\r\n// \t\tpeg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\r\n// \t\tpeg$maxFailPos       = 0,\r\n// \t\tpeg$maxFailExpected  = [],\r\n// \t\tpeg$silentFails      = 0,\r\n//\r\n// \t\tpeg$cache = {},\r\n// \t\tpeg$result;\r\n//\r\n// \tif (\"startRule\" in options) {\r\n// \t  if (!(options.startRule in peg$startRuleFunctions)) {\r\n// \t\treturn null;\r\n// \t  }\r\n//\r\n// \t  peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\r\n// \t}\r\n//\r\n// \tfunction text() {\r\n// \t  return input.substring(peg$reportedPos, peg$currPos);\r\n// \t}\r\n//\r\n// \tfunction offset() {\r\n// \t  return peg$reportedPos;\r\n// \t}\r\n//\r\n// \tfunction line() {\r\n// \t  return peg$computePosDetails(peg$reportedPos).line;\r\n// \t}\r\n//\r\n// \tfunction column() {\r\n// \t  return peg$computePosDetails(peg$reportedPos).column;\r\n// \t}\r\n//\r\n// \tfunction expected(description) {\r\n// \t  return null;\r\n// \t}\r\n//\r\n// \tfunction error(message) {\r\n// \t  return null;\r\n// \t}\r\n//\r\n// \tfunction peg$computePosDetails(pos) {\r\n// \t  function advance(details, startPos, endPos) {\r\n// \t\tvar p, ch;\r\n//\r\n// \t\tfor (p = startPos; p < endPos; p++) {\r\n// \t\t  ch = input.charAt(p);\r\n// \t\t  if (ch === \"\\n\") {\r\n// \t\t\tif (!details.seenCR) { details.line++; }\r\n// \t\t\tdetails.column = 1;\r\n// \t\t\tdetails.seenCR = false;\r\n// \t\t  } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\r\n// \t\t\tdetails.line++;\r\n// \t\t\tdetails.column = 1;\r\n// \t\t\tdetails.seenCR = true;\r\n// \t\t  } else {\r\n// \t\t\tdetails.column++;\r\n// \t\t\tdetails.seenCR = false;\r\n// \t\t  }\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  if (peg$cachedPos !== pos) {\r\n// \t\tif (peg$cachedPos > pos) {\r\n// \t\t  peg$cachedPos = 0;\r\n// \t\t  peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\r\n// \t\t}\r\n// \t\tadvance(peg$cachedPosDetails, peg$cachedPos, pos);\r\n// \t\tpeg$cachedPos = pos;\r\n// \t  }\r\n//\r\n// \t  return peg$cachedPosDetails;\r\n// \t}\r\n//\r\n// \tfunction peg$fail(expected) {\r\n// \t  if (peg$currPos < peg$maxFailPos) { return; }\r\n//\r\n// \t  if (peg$currPos > peg$maxFailPos) {\r\n// \t\tpeg$maxFailPos = peg$currPos;\r\n// \t\tpeg$maxFailExpected = [];\r\n// \t  }\r\n//\r\n// \t  peg$maxFailExpected.push(expected);\r\n// \t}\r\n//\r\n// \tfunction peg$buildException(message, expected, pos) {\r\n// \t  function cleanupExpected(expected) {\r\n// \t\tvar i = 1;\r\n//\r\n// \t\texpected.sort(function(a, b) {\r\n// \t\t  if (a.description < b.description) {\r\n// \t\t\treturn -1;\r\n// \t\t  } else if (a.description > b.description) {\r\n// \t\t\treturn 1;\r\n// \t\t  } else {\r\n// \t\t\treturn 0;\r\n// \t\t  }\r\n// \t\t});\r\n//\r\n// \t\twhile (i < expected.length) {\r\n// \t\t  if (expected[i - 1] === expected[i]) {\r\n// \t\t\texpected.splice(i, 1);\r\n// \t\t  } else {\r\n// \t\t\ti++;\r\n// \t\t  }\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  function buildMessage(expected, found) {\r\n// \t\tfunction stringEscape(s) {\r\n// \t\t  function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\r\n//\r\n// \t\t  return s\r\n// \t\t\t.replace(/\\\\/g,   '\\\\\\\\')\r\n// \t\t\t.replace(/\"/g,    '\\\\\"')\r\n// \t\t\t.replace(/\\x08/g, '\\\\b')\r\n// \t\t\t.replace(/\\t/g,   '\\\\t')\r\n// \t\t\t.replace(/\\n/g,   '\\\\n')\r\n// \t\t\t.replace(/\\f/g,   '\\\\f')\r\n// \t\t\t.replace(/\\r/g,   '\\\\r')\r\n// \t\t\t.replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\r\n// \t\t\t.replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\r\n// \t\t\t.replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\r\n// \t\t\t.replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\r\n// \t\t}\r\n//\r\n// \t\tvar expectedDescs = new Array(expected.length),\r\n// \t\t\texpectedDesc, foundDesc, i;\r\n//\r\n// \t\tfor (i = 0; i < expected.length; i++) {\r\n// \t\t  expectedDescs[i] = expected[i].description;\r\n// \t\t}\r\n//\r\n// \t\texpectedDesc = expected.length > 1\r\n// \t\t  ? expectedDescs.slice(0, -1).join(\", \")\r\n// \t\t\t  + \" or \"\r\n// \t\t\t  + expectedDescs[expected.length - 1]\r\n// \t\t  : expectedDescs[0];\r\n//\r\n// \t\tfoundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\r\n//\r\n// \t\treturn \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\r\n// \t  }\r\n//\r\n// \t  var posDetails = peg$computePosDetails(pos),\r\n// \t\t  found      = pos < input.length ? input.charAt(pos) : null;\r\n//\r\n// \t  if (expected !== null) {\r\n// \t\tcleanupExpected(expected);\r\n// \t  }\r\n//\r\n// \t  return null;\r\n// \t}\r\n//\r\n// \tfunction peg$parsestart() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 0,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parseline();\r\n// \t  while (s2 !== peg$FAILED) {\r\n// \t\ts1.push(s2);\r\n// \t\ts2 = peg$parseline();\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c1();\r\n// \t  }\r\n// \t  s0 = s1;\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseline() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 1,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parseS();\r\n// \t  while (s2 !== peg$FAILED) {\r\n// \t\ts1.push(s2);\r\n// \t\ts2 = peg$parseS();\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parseexpression();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parseS();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parseS();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\ts4 = [];\r\n// \t\t\ts5 = peg$parsecomment();\r\n// \t\t\twhile (s5 !== peg$FAILED) {\r\n// \t\t\t  s4.push(s5);\r\n// \t\t\t  s5 = peg$parsecomment();\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  s5 = [];\r\n// \t\t\t  s6 = peg$parseNL();\r\n// \t\t\t  if (s6 !== peg$FAILED) {\r\n// \t\t\t\twhile (s6 !== peg$FAILED) {\r\n// \t\t\t\t  s5.push(s6);\r\n// \t\t\t\t  s6 = peg$parseNL();\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\ts5 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t  if (s5 === peg$FAILED) {\r\n// \t\t\t\ts5 = peg$parseEOF();\r\n// \t\t\t  }\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\ts1 = [s1, s2, s3, s4, s5];\r\n// \t\t\t\ts0 = s1;\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = [];\r\n// \t\ts2 = peg$parseS();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  while (s2 !== peg$FAILED) {\r\n// \t\t\ts1.push(s2);\r\n// \t\t\ts2 = peg$parseS();\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  s1 = peg$c2;\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = [];\r\n// \t\t  s3 = peg$parseNL();\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\twhile (s3 !== peg$FAILED) {\r\n// \t\t\t  s2.push(s3);\r\n// \t\t\t  s3 = peg$parseNL();\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\ts2 = peg$c2;\r\n// \t\t  }\r\n// \t\t  if (s2 === peg$FAILED) {\r\n// \t\t\ts2 = peg$parseEOF();\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\ts1 = [s1, s2];\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t\tif (s0 === peg$FAILED) {\r\n// \t\t  s0 = peg$parseNL();\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseexpression() {\r\n// \t  var s0;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 2,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$parsecomment();\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$parsepath();\r\n// \t\tif (s0 === peg$FAILED) {\r\n// \t\t  s0 = peg$parsetablearray();\r\n// \t\t  if (s0 === peg$FAILED) {\r\n// \t\t\ts0 = peg$parseassignment();\r\n// \t\t  }\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsecomment() {\r\n// \t  var s0, s1, s2, s3, s4, s5;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 3,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 35) {\r\n// \t\ts1 = peg$c3;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c4); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = [];\r\n// \t\ts3 = peg$currPos;\r\n// \t\ts4 = peg$currPos;\r\n// \t\tpeg$silentFails++;\r\n// \t\ts5 = peg$parseNL();\r\n// \t\tif (s5 === peg$FAILED) {\r\n// \t\t  s5 = peg$parseEOF();\r\n// \t\t}\r\n// \t\tpeg$silentFails--;\r\n// \t\tif (s5 === peg$FAILED) {\r\n// \t\t  s4 = peg$c5;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s4;\r\n// \t\t  s4 = peg$c2;\r\n// \t\t}\r\n// \t\tif (s4 !== peg$FAILED) {\r\n// \t\t  if (input.length > peg$currPos) {\r\n// \t\t\ts5 = input.charAt(peg$currPos);\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts5 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c6); }\r\n// \t\t  }\r\n// \t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\ts4 = [s4, s5];\r\n// \t\t\ts3 = s4;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s3;\r\n// \t\t\ts3 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s3;\r\n// \t\t  s3 = peg$c2;\r\n// \t\t}\r\n// \t\twhile (s3 !== peg$FAILED) {\r\n// \t\t  s2.push(s3);\r\n// \t\t  s3 = peg$currPos;\r\n// \t\t  s4 = peg$currPos;\r\n// \t\t  peg$silentFails++;\r\n// \t\t  s5 = peg$parseNL();\r\n// \t\t  if (s5 === peg$FAILED) {\r\n// \t\t\ts5 = peg$parseEOF();\r\n// \t\t  }\r\n// \t\t  peg$silentFails--;\r\n// \t\t  if (s5 === peg$FAILED) {\r\n// \t\t\ts4 = peg$c5;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s4;\r\n// \t\t\ts4 = peg$c2;\r\n// \t\t  }\r\n// \t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\tif (input.length > peg$currPos) {\r\n// \t\t\t  s5 = input.charAt(peg$currPos);\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s5 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c6); }\r\n// \t\t\t}\r\n// \t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t  s4 = [s4, s5];\r\n// \t\t\t  s3 = s4;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s3;\r\n// \t\t\t  s3 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s3;\r\n// \t\t\ts3 = peg$c2;\r\n// \t\t  }\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s1 = [s1, s2];\r\n// \t\t  s0 = s1;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsepath() {\r\n// \t  var s0, s1, s2, s3, s4, s5;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 4,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 91) {\r\n// \t\ts1 = peg$c7;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = [];\r\n// \t\ts3 = peg$parseS();\r\n// \t\twhile (s3 !== peg$FAILED) {\r\n// \t\t  s2.push(s3);\r\n// \t\t  s3 = peg$parseS();\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = peg$parsetable_key();\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\ts4 = [];\r\n// \t\t\ts5 = peg$parseS();\r\n// \t\t\twhile (s5 !== peg$FAILED) {\r\n// \t\t\t  s4.push(s5);\r\n// \t\t\t  s5 = peg$parseS();\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  if (input.charCodeAt(peg$currPos) === 93) {\r\n// \t\t\t\ts5 = peg$c9;\r\n// \t\t\t\tpeg$currPos++;\r\n// \t\t\t  } else {\r\n// \t\t\t\ts5 = peg$FAILED;\r\n// \t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n// \t\t\t  }\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\ts1 = peg$c11(s3);\r\n// \t\t\t\ts0 = s1;\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsetablearray() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6, s7;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 5,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 91) {\r\n// \t\ts1 = peg$c7;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tif (input.charCodeAt(peg$currPos) === 91) {\r\n// \t\t  s2 = peg$c7;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s2 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parseS();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parseS();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\ts4 = peg$parsetable_key();\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  s5 = [];\r\n// \t\t\t  s6 = peg$parseS();\r\n// \t\t\t  while (s6 !== peg$FAILED) {\r\n// \t\t\t\ts5.push(s6);\r\n// \t\t\t\ts6 = peg$parseS();\r\n// \t\t\t  }\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\tif (input.charCodeAt(peg$currPos) === 93) {\r\n// \t\t\t\t  s6 = peg$c9;\r\n// \t\t\t\t  peg$currPos++;\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  s6 = peg$FAILED;\r\n// \t\t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n// \t\t\t\t}\r\n// \t\t\t\tif (s6 !== peg$FAILED) {\r\n// \t\t\t\t  if (input.charCodeAt(peg$currPos) === 93) {\r\n// \t\t\t\t\ts7 = peg$c9;\r\n// \t\t\t\t\tpeg$currPos++;\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\ts7 = peg$FAILED;\r\n// \t\t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n// \t\t\t\t  }\r\n// \t\t\t\t  if (s7 !== peg$FAILED) {\r\n// \t\t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\t\ts1 = peg$c12(s4);\r\n// \t\t\t\t\ts0 = s1;\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\t\ts0 = peg$c2;\r\n// \t\t\t\t  }\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s0;\r\n// \t\t\t\t  s0 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsetable_key() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 6,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parsedot_ended_table_key_part();\r\n// \t  if (s2 !== peg$FAILED) {\r\n// \t\twhile (s2 !== peg$FAILED) {\r\n// \t\t  s1.push(s2);\r\n// \t\t  s2 = peg$parsedot_ended_table_key_part();\r\n// \t\t}\r\n// \t  } else {\r\n// \t\ts1 = peg$c2;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parsetable_key_part();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c13(s1, s2);\r\n// \t\t  s0 = s1;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = peg$parsetable_key_part();\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c14(s1);\r\n// \t\t}\r\n// \t\ts0 = s1;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsetable_key_part() {\r\n// \t  var s0, s1, s2, s3, s4;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 7,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parseS();\r\n// \t  while (s2 !== peg$FAILED) {\r\n// \t\ts1.push(s2);\r\n// \t\ts2 = peg$parseS();\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parsekey();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parseS();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parseS();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c15(s2);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = [];\r\n// \t\ts2 = peg$parseS();\r\n// \t\twhile (s2 !== peg$FAILED) {\r\n// \t\t  s1.push(s2);\r\n// \t\t  s2 = peg$parseS();\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = peg$parsequoted_key();\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\ts3 = [];\r\n// \t\t\ts4 = peg$parseS();\r\n// \t\t\twhile (s4 !== peg$FAILED) {\r\n// \t\t\t  s3.push(s4);\r\n// \t\t\t  s4 = peg$parseS();\r\n// \t\t\t}\r\n// \t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c15(s2);\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsedot_ended_table_key_part() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 8,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parseS();\r\n// \t  while (s2 !== peg$FAILED) {\r\n// \t\ts1.push(s2);\r\n// \t\ts2 = peg$parseS();\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parsekey();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parseS();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parseS();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 46) {\r\n// \t\t\t  s4 = peg$c16;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s4 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  s5 = [];\r\n// \t\t\t  s6 = peg$parseS();\r\n// \t\t\t  while (s6 !== peg$FAILED) {\r\n// \t\t\t\ts5.push(s6);\r\n// \t\t\t\ts6 = peg$parseS();\r\n// \t\t\t  }\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\ts1 = peg$c15(s2);\r\n// \t\t\t\ts0 = s1;\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = [];\r\n// \t\ts2 = peg$parseS();\r\n// \t\twhile (s2 !== peg$FAILED) {\r\n// \t\t  s1.push(s2);\r\n// \t\t  s2 = peg$parseS();\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = peg$parsequoted_key();\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\ts3 = [];\r\n// \t\t\ts4 = peg$parseS();\r\n// \t\t\twhile (s4 !== peg$FAILED) {\r\n// \t\t\t  s3.push(s4);\r\n// \t\t\t  s4 = peg$parseS();\r\n// \t\t\t}\r\n// \t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t  if (input.charCodeAt(peg$currPos) === 46) {\r\n// \t\t\t\ts4 = peg$c16;\r\n// \t\t\t\tpeg$currPos++;\r\n// \t\t\t  } else {\r\n// \t\t\t\ts4 = peg$FAILED;\r\n// \t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n// \t\t\t  }\r\n// \t\t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\t\ts5 = [];\r\n// \t\t\t\ts6 = peg$parseS();\r\n// \t\t\t\twhile (s6 !== peg$FAILED) {\r\n// \t\t\t\t  s5.push(s6);\r\n// \t\t\t\t  s6 = peg$parseS();\r\n// \t\t\t\t}\r\n// \t\t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t\t  peg$reportedPos = s0;\r\n// \t\t\t\t  s1 = peg$c15(s2);\r\n// \t\t\t\t  s0 = s1;\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s0;\r\n// \t\t\t\t  s0 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseassignment() {\r\n// \t  var s0, s1, s2, s3, s4, s5;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 9,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$parsekey();\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = [];\r\n// \t\ts3 = peg$parseS();\r\n// \t\twhile (s3 !== peg$FAILED) {\r\n// \t\t  s2.push(s3);\r\n// \t\t  s3 = peg$parseS();\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 61) {\r\n// \t\t\ts3 = peg$c18;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts3 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\ts4 = [];\r\n// \t\t\ts5 = peg$parseS();\r\n// \t\t\twhile (s5 !== peg$FAILED) {\r\n// \t\t\t  s4.push(s5);\r\n// \t\t\t  s5 = peg$parseS();\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  s5 = peg$parsevalue();\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\ts1 = peg$c20(s1, s5);\r\n// \t\t\t\ts0 = s1;\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = peg$parsequoted_key();\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = [];\r\n// \t\t  s3 = peg$parseS();\r\n// \t\t  while (s3 !== peg$FAILED) {\r\n// \t\t\ts2.push(s3);\r\n// \t\t\ts3 = peg$parseS();\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 61) {\r\n// \t\t\t  s3 = peg$c18;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s3 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n// \t\t\t}\r\n// \t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t  s4 = [];\r\n// \t\t\t  s5 = peg$parseS();\r\n// \t\t\t  while (s5 !== peg$FAILED) {\r\n// \t\t\t\ts4.push(s5);\r\n// \t\t\t\ts5 = peg$parseS();\r\n// \t\t\t  }\r\n// \t\t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\t\ts5 = peg$parsevalue();\r\n// \t\t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t\t  peg$reportedPos = s0;\r\n// \t\t\t\t  s1 = peg$c20(s1, s5);\r\n// \t\t\t\t  s0 = s1;\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s0;\r\n// \t\t\t\t  s0 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsekey() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 10,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parseASCII_BASIC();\r\n// \t  if (s2 !== peg$FAILED) {\r\n// \t\twhile (s2 !== peg$FAILED) {\r\n// \t\t  s1.push(s2);\r\n// \t\t  s2 = peg$parseASCII_BASIC();\r\n// \t\t}\r\n// \t  } else {\r\n// \t\ts1 = peg$c2;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c21(s1);\r\n// \t  }\r\n// \t  s0 = s1;\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsequoted_key() {\r\n// \t  var s0, s1;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 11,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$parsedouble_quoted_single_line_string();\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c22(s1);\r\n// \t  }\r\n// \t  s0 = s1;\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = peg$parsesingle_quoted_single_line_string();\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c22(s1);\r\n// \t\t}\r\n// \t\ts0 = s1;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsevalue() {\r\n// \t  var s0;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 12,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$parsestring();\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$parsedatetime();\r\n// \t\tif (s0 === peg$FAILED) {\r\n// \t\t  s0 = peg$parsefloat();\r\n// \t\t  if (s0 === peg$FAILED) {\r\n// \t\t\ts0 = peg$parseinteger();\r\n// \t\t\tif (s0 === peg$FAILED) {\r\n// \t\t\t  s0 = peg$parseboolean();\r\n// \t\t\t  if (s0 === peg$FAILED) {\r\n// \t\t\t\ts0 = peg$parsearray();\r\n// \t\t\t\tif (s0 === peg$FAILED) {\r\n// \t\t\t\t  s0 = peg$parseinline_table();\r\n// \t\t\t\t}\r\n// \t\t\t  }\r\n// \t\t\t}\r\n// \t\t  }\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsestring() {\r\n// \t  var s0;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 13,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$parsedouble_quoted_multiline_string();\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$parsedouble_quoted_single_line_string();\r\n// \t\tif (s0 === peg$FAILED) {\r\n// \t\t  s0 = peg$parsesingle_quoted_multiline_string();\r\n// \t\t  if (s0 === peg$FAILED) {\r\n// \t\t\ts0 = peg$parsesingle_quoted_single_line_string();\r\n// \t\t  }\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsedouble_quoted_multiline_string() {\r\n// \t  var s0, s1, s2, s3, s4;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 14,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.substr(peg$currPos, 3) === peg$c23) {\r\n// \t\ts1 = peg$c23;\r\n// \t\tpeg$currPos += 3;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c24); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parseNL();\r\n// \t\tif (s2 === peg$FAILED) {\r\n// \t\t  s2 = peg$c25;\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parsemultiline_string_char();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parsemultiline_string_char();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tif (input.substr(peg$currPos, 3) === peg$c23) {\r\n// \t\t\t  s4 = peg$c23;\r\n// \t\t\t  peg$currPos += 3;\r\n// \t\t\t} else {\r\n// \t\t\t  s4 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c24); }\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c26(s3);\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsedouble_quoted_single_line_string() {\r\n// \t  var s0, s1, s2, s3;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 15,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 34) {\r\n// \t\ts1 = peg$c27;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c28); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = [];\r\n// \t\ts3 = peg$parsestring_char();\r\n// \t\twhile (s3 !== peg$FAILED) {\r\n// \t\t  s2.push(s3);\r\n// \t\t  s3 = peg$parsestring_char();\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 34) {\r\n// \t\t\ts3 = peg$c27;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts3 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c28); }\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c26(s2);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsesingle_quoted_multiline_string() {\r\n// \t  var s0, s1, s2, s3, s4;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 16,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.substr(peg$currPos, 3) === peg$c29) {\r\n// \t\ts1 = peg$c29;\r\n// \t\tpeg$currPos += 3;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c30); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parseNL();\r\n// \t\tif (s2 === peg$FAILED) {\r\n// \t\t  s2 = peg$c25;\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parsemultiline_literal_char();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parsemultiline_literal_char();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tif (input.substr(peg$currPos, 3) === peg$c29) {\r\n// \t\t\t  s4 = peg$c29;\r\n// \t\t\t  peg$currPos += 3;\r\n// \t\t\t} else {\r\n// \t\t\t  s4 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c30); }\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c26(s3);\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsesingle_quoted_single_line_string() {\r\n// \t  var s0, s1, s2, s3;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 17,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 39) {\r\n// \t\ts1 = peg$c31;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = [];\r\n// \t\ts3 = peg$parseliteral_char();\r\n// \t\twhile (s3 !== peg$FAILED) {\r\n// \t\t  s2.push(s3);\r\n// \t\t  s3 = peg$parseliteral_char();\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 39) {\r\n// \t\t\ts3 = peg$c31;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts3 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c26(s2);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsestring_char() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 18,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$parseESCAPED();\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = peg$currPos;\r\n// \t\tpeg$silentFails++;\r\n// \t\tif (input.charCodeAt(peg$currPos) === 34) {\r\n// \t\t  s2 = peg$c27;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s2 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c28); }\r\n// \t\t}\r\n// \t\tpeg$silentFails--;\r\n// \t\tif (s2 === peg$FAILED) {\r\n// \t\t  s1 = peg$c5;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s1;\r\n// \t\t  s1 = peg$c2;\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  if (input.length > peg$currPos) {\r\n// \t\t\ts2 = input.charAt(peg$currPos);\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts2 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c6); }\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c33(s2);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseliteral_char() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 19,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$currPos;\r\n// \t  peg$silentFails++;\r\n// \t  if (input.charCodeAt(peg$currPos) === 39) {\r\n// \t\ts2 = peg$c31;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts2 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n// \t  }\r\n// \t  peg$silentFails--;\r\n// \t  if (s2 === peg$FAILED) {\r\n// \t\ts1 = peg$c5;\r\n// \t  } else {\r\n// \t\tpeg$currPos = s1;\r\n// \t\ts1 = peg$c2;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tif (input.length > peg$currPos) {\r\n// \t\t  s2 = input.charAt(peg$currPos);\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s2 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c6); }\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c33(s2);\r\n// \t\t  s0 = s1;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsemultiline_string_char() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 20,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$parseESCAPED();\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$parsemultiline_string_delim();\r\n// \t\tif (s0 === peg$FAILED) {\r\n// \t\t  s0 = peg$currPos;\r\n// \t\t  s1 = peg$currPos;\r\n// \t\t  peg$silentFails++;\r\n// \t\t  if (input.substr(peg$currPos, 3) === peg$c23) {\r\n// \t\t\ts2 = peg$c23;\r\n// \t\t\tpeg$currPos += 3;\r\n// \t\t  } else {\r\n// \t\t\ts2 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c24); }\r\n// \t\t  }\r\n// \t\t  peg$silentFails--;\r\n// \t\t  if (s2 === peg$FAILED) {\r\n// \t\t\ts1 = peg$c5;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s1;\r\n// \t\t\ts1 = peg$c2;\r\n// \t\t  }\r\n// \t\t  if (s1 !== peg$FAILED) {\r\n// \t\t\tif (input.length > peg$currPos) {\r\n// \t\t\t  s2 = input.charAt(peg$currPos);\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s2 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c6); }\r\n// \t\t\t}\r\n// \t\t\tif (s2 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c34(s2);\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsemultiline_string_delim() {\r\n// \t  var s0, s1, s2, s3, s4;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 21,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 92) {\r\n// \t\ts1 = peg$c35;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c36); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parseNL();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parseNLS();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parseNLS();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c37();\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsemultiline_literal_char() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 22,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$currPos;\r\n// \t  peg$silentFails++;\r\n// \t  if (input.substr(peg$currPos, 3) === peg$c29) {\r\n// \t\ts2 = peg$c29;\r\n// \t\tpeg$currPos += 3;\r\n// \t  } else {\r\n// \t\ts2 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c30); }\r\n// \t  }\r\n// \t  peg$silentFails--;\r\n// \t  if (s2 === peg$FAILED) {\r\n// \t\ts1 = peg$c5;\r\n// \t  } else {\r\n// \t\tpeg$currPos = s1;\r\n// \t\ts1 = peg$c2;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tif (input.length > peg$currPos) {\r\n// \t\t  s2 = input.charAt(peg$currPos);\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s2 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c6); }\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c33(s2);\r\n// \t\t  s0 = s1;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsefloat() {\r\n// \t  var s0, s1, s2, s3;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 23,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$parsefloat_text();\r\n// \t  if (s1 === peg$FAILED) {\r\n// \t\ts1 = peg$parseinteger_text();\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tif (input.charCodeAt(peg$currPos) === 101) {\r\n// \t\t  s2 = peg$c38;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s2 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c39); }\r\n// \t\t}\r\n// \t\tif (s2 === peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 69) {\r\n// \t\t\ts2 = peg$c40;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts2 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c41); }\r\n// \t\t  }\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = peg$parseinteger_text();\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c42(s1, s3);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = peg$parsefloat_text();\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c43(s1);\r\n// \t\t}\r\n// \t\ts0 = s1;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsefloat_text() {\r\n// \t  var s0, s1, s2, s3, s4, s5;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 24,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 43) {\r\n// \t\ts1 = peg$c44;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c45); }\r\n// \t  }\r\n// \t  if (s1 === peg$FAILED) {\r\n// \t\ts1 = peg$c25;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$currPos;\r\n// \t\ts3 = peg$parseDIGITS();\r\n// \t\tif (s3 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 46) {\r\n// \t\t\ts4 = peg$c16;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts4 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n// \t\t  }\r\n// \t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\ts5 = peg$parseDIGITS();\r\n// \t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t  s3 = [s3, s4, s5];\r\n// \t\t\t  s2 = s3;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s2;\r\n// \t\t\t  s2 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s2;\r\n// \t\t\ts2 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s2;\r\n// \t\t  s2 = peg$c2;\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c46(s2);\r\n// \t\t  s0 = s1;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\tif (input.charCodeAt(peg$currPos) === 45) {\r\n// \t\t  s1 = peg$c47;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s1 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c48); }\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = peg$currPos;\r\n// \t\t  s3 = peg$parseDIGITS();\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 46) {\r\n// \t\t\t  s4 = peg$c16;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s4 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  s5 = peg$parseDIGITS();\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\ts3 = [s3, s4, s5];\r\n// \t\t\t\ts2 = s3;\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s2;\r\n// \t\t\t\ts2 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s2;\r\n// \t\t\t  s2 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s2;\r\n// \t\t\ts2 = peg$c2;\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c49(s2);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseinteger() {\r\n// \t  var s0, s1;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 25,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$parseinteger_text();\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c50(s1);\r\n// \t  }\r\n// \t  s0 = s1;\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseinteger_text() {\r\n// \t  var s0, s1, s2, s3, s4;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 26,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 43) {\r\n// \t\ts1 = peg$c44;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c45); }\r\n// \t  }\r\n// \t  if (s1 === peg$FAILED) {\r\n// \t\ts1 = peg$c25;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = [];\r\n// \t\ts3 = peg$parseDIGIT_OR_UNDER();\r\n// \t\tif (s3 !== peg$FAILED) {\r\n// \t\t  while (s3 !== peg$FAILED) {\r\n// \t\t\ts2.push(s3);\r\n// \t\t\ts3 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  s2 = peg$c2;\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = peg$currPos;\r\n// \t\t  peg$silentFails++;\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 46) {\r\n// \t\t\ts4 = peg$c16;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts4 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n// \t\t  }\r\n// \t\t  peg$silentFails--;\r\n// \t\t  if (s4 === peg$FAILED) {\r\n// \t\t\ts3 = peg$c5;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s3;\r\n// \t\t\ts3 = peg$c2;\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c46(s2);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\tif (input.charCodeAt(peg$currPos) === 45) {\r\n// \t\t  s1 = peg$c47;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s1 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c48); }\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = [];\r\n// \t\t  s3 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\twhile (s3 !== peg$FAILED) {\r\n// \t\t\t  s2.push(s3);\r\n// \t\t\t  s3 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\ts2 = peg$c2;\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\ts3 = peg$currPos;\r\n// \t\t\tpeg$silentFails++;\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 46) {\r\n// \t\t\t  s4 = peg$c16;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s4 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n// \t\t\t}\r\n// \t\t\tpeg$silentFails--;\r\n// \t\t\tif (s4 === peg$FAILED) {\r\n// \t\t\t  s3 = peg$c5;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s3;\r\n// \t\t\t  s3 = peg$c2;\r\n// \t\t\t}\r\n// \t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c49(s2);\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseboolean() {\r\n// \t  var s0, s1;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 27,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.substr(peg$currPos, 4) === peg$c51) {\r\n// \t\ts1 = peg$c51;\r\n// \t\tpeg$currPos += 4;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c52); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c53();\r\n// \t  }\r\n// \t  s0 = s1;\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\tif (input.substr(peg$currPos, 5) === peg$c54) {\r\n// \t\t  s1 = peg$c54;\r\n// \t\t  peg$currPos += 5;\r\n// \t\t} else {\r\n// \t\t  s1 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c55); }\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c56();\r\n// \t\t}\r\n// \t\ts0 = s1;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsearray() {\r\n// \t  var s0, s1, s2, s3, s4;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 28,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 91) {\r\n// \t\ts1 = peg$c7;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = [];\r\n// \t\ts3 = peg$parsearray_sep();\r\n// \t\twhile (s3 !== peg$FAILED) {\r\n// \t\t  s2.push(s3);\r\n// \t\t  s3 = peg$parsearray_sep();\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 93) {\r\n// \t\t\ts3 = peg$c9;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts3 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c57();\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\tif (input.charCodeAt(peg$currPos) === 91) {\r\n// \t\t  s1 = peg$c7;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s1 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = peg$parsearray_value();\r\n// \t\t  if (s2 === peg$FAILED) {\r\n// \t\t\ts2 = peg$c25;\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 93) {\r\n// \t\t\t  s3 = peg$c9;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s3 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n// \t\t\t}\r\n// \t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c58(s2);\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t\tif (s0 === peg$FAILED) {\r\n// \t\t  s0 = peg$currPos;\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 91) {\r\n// \t\t\ts1 = peg$c7;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts1 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n// \t\t  }\r\n// \t\t  if (s1 !== peg$FAILED) {\r\n// \t\t\ts2 = [];\r\n// \t\t\ts3 = peg$parsearray_value_list();\r\n// \t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t  while (s3 !== peg$FAILED) {\r\n// \t\t\t\ts2.push(s3);\r\n// \t\t\t\ts3 = peg$parsearray_value_list();\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  s2 = peg$c2;\r\n// \t\t\t}\r\n// \t\t\tif (s2 !== peg$FAILED) {\r\n// \t\t\t  if (input.charCodeAt(peg$currPos) === 93) {\r\n// \t\t\t\ts3 = peg$c9;\r\n// \t\t\t\tpeg$currPos++;\r\n// \t\t\t  } else {\r\n// \t\t\t\ts3 = peg$FAILED;\r\n// \t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n// \t\t\t  }\r\n// \t\t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\ts1 = peg$c59(s2);\r\n// \t\t\t\ts0 = s1;\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t  if (s0 === peg$FAILED) {\r\n// \t\t\ts0 = peg$currPos;\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 91) {\r\n// \t\t\t  s1 = peg$c7;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s1 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n// \t\t\t}\r\n// \t\t\tif (s1 !== peg$FAILED) {\r\n// \t\t\t  s2 = [];\r\n// \t\t\t  s3 = peg$parsearray_value_list();\r\n// \t\t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\t\twhile (s3 !== peg$FAILED) {\r\n// \t\t\t\t  s2.push(s3);\r\n// \t\t\t\t  s3 = peg$parsearray_value_list();\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\ts2 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\t\ts3 = peg$parsearray_value();\r\n// \t\t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t\t  if (input.charCodeAt(peg$currPos) === 93) {\r\n// \t\t\t\t\ts4 = peg$c9;\r\n// \t\t\t\t\tpeg$currPos++;\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\ts4 = peg$FAILED;\r\n// \t\t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n// \t\t\t\t  }\r\n// \t\t\t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\t\ts1 = peg$c60(s2, s3);\r\n// \t\t\t\t\ts0 = s1;\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\t\ts0 = peg$c2;\r\n// \t\t\t\t  }\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s0;\r\n// \t\t\t\t  s0 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  }\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsearray_value() {\r\n// \t  var s0, s1, s2, s3, s4;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 29,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parsearray_sep();\r\n// \t  while (s2 !== peg$FAILED) {\r\n// \t\ts1.push(s2);\r\n// \t\ts2 = peg$parsearray_sep();\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parsevalue();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parsearray_sep();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parsearray_sep();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c61(s2);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsearray_value_list() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 30,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parsearray_sep();\r\n// \t  while (s2 !== peg$FAILED) {\r\n// \t\ts1.push(s2);\r\n// \t\ts2 = peg$parsearray_sep();\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parsevalue();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parsearray_sep();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parsearray_sep();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 44) {\r\n// \t\t\t  s4 = peg$c62;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s4 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c63); }\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  s5 = [];\r\n// \t\t\t  s6 = peg$parsearray_sep();\r\n// \t\t\t  while (s6 !== peg$FAILED) {\r\n// \t\t\t\ts5.push(s6);\r\n// \t\t\t\ts6 = peg$parsearray_sep();\r\n// \t\t\t  }\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\ts1 = peg$c61(s2);\r\n// \t\t\t\ts0 = s1;\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsearray_sep() {\r\n// \t  var s0;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 31,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$parseS();\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$parseNL();\r\n// \t\tif (s0 === peg$FAILED) {\r\n// \t\t  s0 = peg$parsecomment();\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseinline_table() {\r\n// \t  var s0, s1, s2, s3, s4, s5;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 32,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 123) {\r\n// \t\ts1 = peg$c64;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c65); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = [];\r\n// \t\ts3 = peg$parseS();\r\n// \t\twhile (s3 !== peg$FAILED) {\r\n// \t\t  s2.push(s3);\r\n// \t\t  s3 = peg$parseS();\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parseinline_table_assignment();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parseinline_table_assignment();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\ts4 = [];\r\n// \t\t\ts5 = peg$parseS();\r\n// \t\t\twhile (s5 !== peg$FAILED) {\r\n// \t\t\t  s4.push(s5);\r\n// \t\t\t  s5 = peg$parseS();\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  if (input.charCodeAt(peg$currPos) === 125) {\r\n// \t\t\t\ts5 = peg$c66;\r\n// \t\t\t\tpeg$currPos++;\r\n// \t\t\t  } else {\r\n// \t\t\t\ts5 = peg$FAILED;\r\n// \t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c67); }\r\n// \t\t\t  }\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\ts1 = peg$c68(s3);\r\n// \t\t\t\ts0 = s1;\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseinline_table_assignment() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 33,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parseS();\r\n// \t  while (s2 !== peg$FAILED) {\r\n// \t\ts1.push(s2);\r\n// \t\ts2 = peg$parseS();\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parsekey();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = [];\r\n// \t\t  s4 = peg$parseS();\r\n// \t\t  while (s4 !== peg$FAILED) {\r\n// \t\t\ts3.push(s4);\r\n// \t\t\ts4 = peg$parseS();\r\n// \t\t  }\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 61) {\r\n// \t\t\t  s4 = peg$c18;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s4 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  s5 = [];\r\n// \t\t\t  s6 = peg$parseS();\r\n// \t\t\t  while (s6 !== peg$FAILED) {\r\n// \t\t\t\ts5.push(s6);\r\n// \t\t\t\ts6 = peg$parseS();\r\n// \t\t\t  }\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\ts6 = peg$parsevalue();\r\n// \t\t\t\tif (s6 !== peg$FAILED) {\r\n// \t\t\t\t  s7 = [];\r\n// \t\t\t\t  s8 = peg$parseS();\r\n// \t\t\t\t  while (s8 !== peg$FAILED) {\r\n// \t\t\t\t\ts7.push(s8);\r\n// \t\t\t\t\ts8 = peg$parseS();\r\n// \t\t\t\t  }\r\n// \t\t\t\t  if (s7 !== peg$FAILED) {\r\n// \t\t\t\t\tif (input.charCodeAt(peg$currPos) === 44) {\r\n// \t\t\t\t\t  s8 = peg$c62;\r\n// \t\t\t\t\t  peg$currPos++;\r\n// \t\t\t\t\t} else {\r\n// \t\t\t\t\t  s8 = peg$FAILED;\r\n// \t\t\t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c63); }\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\tif (s8 !== peg$FAILED) {\r\n// \t\t\t\t\t  s9 = [];\r\n// \t\t\t\t\t  s10 = peg$parseS();\r\n// \t\t\t\t\t  while (s10 !== peg$FAILED) {\r\n// \t\t\t\t\t\ts9.push(s10);\r\n// \t\t\t\t\t\ts10 = peg$parseS();\r\n// \t\t\t\t\t  }\r\n// \t\t\t\t\t  if (s9 !== peg$FAILED) {\r\n// \t\t\t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\t\t\ts1 = peg$c69(s2, s6);\r\n// \t\t\t\t\t\ts0 = s1;\r\n// \t\t\t\t\t  } else {\r\n// \t\t\t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\t\t\ts0 = peg$c2;\r\n// \t\t\t\t\t  }\r\n// \t\t\t\t\t} else {\r\n// \t\t\t\t\t  peg$currPos = s0;\r\n// \t\t\t\t\t  s0 = peg$c2;\r\n// \t\t\t\t\t}\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\t\ts0 = peg$c2;\r\n// \t\t\t\t  }\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s0;\r\n// \t\t\t\t  s0 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = [];\r\n// \t\ts2 = peg$parseS();\r\n// \t\twhile (s2 !== peg$FAILED) {\r\n// \t\t  s1.push(s2);\r\n// \t\t  s2 = peg$parseS();\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = peg$parsekey();\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\ts3 = [];\r\n// \t\t\ts4 = peg$parseS();\r\n// \t\t\twhile (s4 !== peg$FAILED) {\r\n// \t\t\t  s3.push(s4);\r\n// \t\t\t  s4 = peg$parseS();\r\n// \t\t\t}\r\n// \t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t  if (input.charCodeAt(peg$currPos) === 61) {\r\n// \t\t\t\ts4 = peg$c18;\r\n// \t\t\t\tpeg$currPos++;\r\n// \t\t\t  } else {\r\n// \t\t\t\ts4 = peg$FAILED;\r\n// \t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n// \t\t\t  }\r\n// \t\t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\t\ts5 = [];\r\n// \t\t\t\ts6 = peg$parseS();\r\n// \t\t\t\twhile (s6 !== peg$FAILED) {\r\n// \t\t\t\t  s5.push(s6);\r\n// \t\t\t\t  s6 = peg$parseS();\r\n// \t\t\t\t}\r\n// \t\t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t\t  s6 = peg$parsevalue();\r\n// \t\t\t\t  if (s6 !== peg$FAILED) {\r\n// \t\t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\t\ts1 = peg$c69(s2, s6);\r\n// \t\t\t\t\ts0 = s1;\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\t\ts0 = peg$c2;\r\n// \t\t\t\t  }\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s0;\r\n// \t\t\t\t  s0 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s0;\r\n// \t\t\t\ts0 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsesecfragment() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 34,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.charCodeAt(peg$currPos) === 46) {\r\n// \t\ts1 = peg$c16;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c17); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$parseDIGITS();\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c70(s2);\r\n// \t\t  s0 = s1;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsedate() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 35,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$currPos;\r\n// \t  s2 = peg$parseDIGIT_OR_UNDER();\r\n// \t  if (s2 !== peg$FAILED) {\r\n// \t\ts3 = peg$parseDIGIT_OR_UNDER();\r\n// \t\tif (s3 !== peg$FAILED) {\r\n// \t\t  s4 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\ts5 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t  if (input.charCodeAt(peg$currPos) === 45) {\r\n// \t\t\t\ts6 = peg$c47;\r\n// \t\t\t\tpeg$currPos++;\r\n// \t\t\t  } else {\r\n// \t\t\t\ts6 = peg$FAILED;\r\n// \t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c48); }\r\n// \t\t\t  }\r\n// \t\t\t  if (s6 !== peg$FAILED) {\r\n// \t\t\t\ts7 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\tif (s7 !== peg$FAILED) {\r\n// \t\t\t\t  s8 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t  if (s8 !== peg$FAILED) {\r\n// \t\t\t\t\tif (input.charCodeAt(peg$currPos) === 45) {\r\n// \t\t\t\t\t  s9 = peg$c47;\r\n// \t\t\t\t\t  peg$currPos++;\r\n// \t\t\t\t\t} else {\r\n// \t\t\t\t\t  s9 = peg$FAILED;\r\n// \t\t\t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c48); }\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\tif (s9 !== peg$FAILED) {\r\n// \t\t\t\t\t  s10 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t\t  if (s10 !== peg$FAILED) {\r\n// \t\t\t\t\t\ts11 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t\t\tif (s11 !== peg$FAILED) {\r\n// \t\t\t\t\t\t  s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];\r\n// \t\t\t\t\t\t  s1 = s2;\r\n// \t\t\t\t\t\t} else {\r\n// \t\t\t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t\t\t}\r\n// \t\t\t\t\t  } else {\r\n// \t\t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t\t  }\r\n// \t\t\t\t\t} else {\r\n// \t\t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t\t}\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t  }\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\ts1 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s1;\r\n// \t\t\t  s1 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s1;\r\n// \t\t\ts1 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s1;\r\n// \t\t  s1 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s1;\r\n// \t\ts1 = peg$c2;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c71(s1);\r\n// \t  }\r\n// \t  s0 = s1;\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsetime() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 36,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$currPos;\r\n// \t  s2 = peg$parseDIGIT_OR_UNDER();\r\n// \t  if (s2 !== peg$FAILED) {\r\n// \t\ts3 = peg$parseDIGIT_OR_UNDER();\r\n// \t\tif (s3 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 58) {\r\n// \t\t\ts4 = peg$c72;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts4 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c73); }\r\n// \t\t  }\r\n// \t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\ts5 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t  s6 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t  if (s6 !== peg$FAILED) {\r\n// \t\t\t\tif (input.charCodeAt(peg$currPos) === 58) {\r\n// \t\t\t\t  s7 = peg$c72;\r\n// \t\t\t\t  peg$currPos++;\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  s7 = peg$FAILED;\r\n// \t\t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c73); }\r\n// \t\t\t\t}\r\n// \t\t\t\tif (s7 !== peg$FAILED) {\r\n// \t\t\t\t  s8 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t  if (s8 !== peg$FAILED) {\r\n// \t\t\t\t\ts9 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t\tif (s9 !== peg$FAILED) {\r\n// \t\t\t\t\t  s10 = peg$parsesecfragment();\r\n// \t\t\t\t\t  if (s10 === peg$FAILED) {\r\n// \t\t\t\t\t\ts10 = peg$c25;\r\n// \t\t\t\t\t  }\r\n// \t\t\t\t\t  if (s10 !== peg$FAILED) {\r\n// \t\t\t\t\t\ts2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10];\r\n// \t\t\t\t\t\ts1 = s2;\r\n// \t\t\t\t\t  } else {\r\n// \t\t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t\t  }\r\n// \t\t\t\t\t} else {\r\n// \t\t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t\t}\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t  }\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\ts1 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s1;\r\n// \t\t\t  s1 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s1;\r\n// \t\t\ts1 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s1;\r\n// \t\t  s1 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s1;\r\n// \t\ts1 = peg$c2;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c74(s1);\r\n// \t  }\r\n// \t  s0 = s1;\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsetime_with_offset() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 37,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$currPos;\r\n// \t  s2 = peg$parseDIGIT_OR_UNDER();\r\n// \t  if (s2 !== peg$FAILED) {\r\n// \t\ts3 = peg$parseDIGIT_OR_UNDER();\r\n// \t\tif (s3 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 58) {\r\n// \t\t\ts4 = peg$c72;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts4 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c73); }\r\n// \t\t  }\r\n// \t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\ts5 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t  s6 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t  if (s6 !== peg$FAILED) {\r\n// \t\t\t\tif (input.charCodeAt(peg$currPos) === 58) {\r\n// \t\t\t\t  s7 = peg$c72;\r\n// \t\t\t\t  peg$currPos++;\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  s7 = peg$FAILED;\r\n// \t\t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c73); }\r\n// \t\t\t\t}\r\n// \t\t\t\tif (s7 !== peg$FAILED) {\r\n// \t\t\t\t  s8 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t  if (s8 !== peg$FAILED) {\r\n// \t\t\t\t\ts9 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t\tif (s9 !== peg$FAILED) {\r\n// \t\t\t\t\t  s10 = peg$parsesecfragment();\r\n// \t\t\t\t\t  if (s10 === peg$FAILED) {\r\n// \t\t\t\t\t\ts10 = peg$c25;\r\n// \t\t\t\t\t  }\r\n// \t\t\t\t\t  if (s10 !== peg$FAILED) {\r\n// \t\t\t\t\t\tif (input.charCodeAt(peg$currPos) === 45) {\r\n// \t\t\t\t\t\t  s11 = peg$c47;\r\n// \t\t\t\t\t\t  peg$currPos++;\r\n// \t\t\t\t\t\t} else {\r\n// \t\t\t\t\t\t  s11 = peg$FAILED;\r\n// \t\t\t\t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c48); }\r\n// \t\t\t\t\t\t}\r\n// \t\t\t\t\t\tif (s11 === peg$FAILED) {\r\n// \t\t\t\t\t\t  if (input.charCodeAt(peg$currPos) === 43) {\r\n// \t\t\t\t\t\t\ts11 = peg$c44;\r\n// \t\t\t\t\t\t\tpeg$currPos++;\r\n// \t\t\t\t\t\t  } else {\r\n// \t\t\t\t\t\t\ts11 = peg$FAILED;\r\n// \t\t\t\t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c45); }\r\n// \t\t\t\t\t\t  }\r\n// \t\t\t\t\t\t}\r\n// \t\t\t\t\t\tif (s11 !== peg$FAILED) {\r\n// \t\t\t\t\t\t  s12 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t\t\t  if (s12 !== peg$FAILED) {\r\n// \t\t\t\t\t\t\ts13 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t\t\t\tif (s13 !== peg$FAILED) {\r\n// \t\t\t\t\t\t\t  if (input.charCodeAt(peg$currPos) === 58) {\r\n// \t\t\t\t\t\t\t\ts14 = peg$c72;\r\n// \t\t\t\t\t\t\t\tpeg$currPos++;\r\n// \t\t\t\t\t\t\t  } else {\r\n// \t\t\t\t\t\t\t\ts14 = peg$FAILED;\r\n// \t\t\t\t\t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c73); }\r\n// \t\t\t\t\t\t\t  }\r\n// \t\t\t\t\t\t\t  if (s14 !== peg$FAILED) {\r\n// \t\t\t\t\t\t\t\ts15 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t\t\t\t\tif (s15 !== peg$FAILED) {\r\n// \t\t\t\t\t\t\t\t  s16 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t\t\t\t\t\t\t  if (s16 !== peg$FAILED) {\r\n// \t\t\t\t\t\t\t\t\ts2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16];\r\n// \t\t\t\t\t\t\t\t\ts1 = s2;\r\n// \t\t\t\t\t\t\t\t  } else {\r\n// \t\t\t\t\t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t\t\t\t\t  }\r\n// \t\t\t\t\t\t\t\t} else {\r\n// \t\t\t\t\t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t\t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t\t  } else {\r\n// \t\t\t\t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t\t\t\t  }\r\n// \t\t\t\t\t\t\t} else {\r\n// \t\t\t\t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t  } else {\r\n// \t\t\t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t\t\t  }\r\n// \t\t\t\t\t\t} else {\r\n// \t\t\t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t\t\t}\r\n// \t\t\t\t\t  } else {\r\n// \t\t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t\t  }\r\n// \t\t\t\t\t} else {\r\n// \t\t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t\t}\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\t\ts1 = peg$c2;\r\n// \t\t\t\t  }\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s1;\r\n// \t\t\t\t  s1 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s1;\r\n// \t\t\t\ts1 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s1;\r\n// \t\t\t  s1 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s1;\r\n// \t\t\ts1 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s1;\r\n// \t\t  s1 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s1;\r\n// \t\ts1 = peg$c2;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c74(s1);\r\n// \t  }\r\n// \t  s0 = s1;\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parsedatetime() {\r\n// \t  var s0, s1, s2, s3, s4;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 38,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = peg$parsedate();\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tif (input.charCodeAt(peg$currPos) === 84) {\r\n// \t\t  s2 = peg$c75;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s2 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c76); }\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  s3 = peg$parsetime();\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\tif (input.charCodeAt(peg$currPos) === 90) {\r\n// \t\t\t  s4 = peg$c77;\r\n// \t\t\t  peg$currPos++;\r\n// \t\t\t} else {\r\n// \t\t\t  s4 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c78); }\r\n// \t\t\t}\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c79(s1, s3);\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\ts1 = peg$parsedate();\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 84) {\r\n// \t\t\ts2 = peg$c75;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts2 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c76); }\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\ts3 = peg$parsetime_with_offset();\r\n// \t\t\tif (s3 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c80(s1, s3);\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s0;\r\n// \t\t\t  s0 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseS() {\r\n// \t  var s0;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 39,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  if (peg$c81.test(input.charAt(peg$currPos))) {\r\n// \t\ts0 = input.charAt(peg$currPos);\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts0 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c82); }\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseNL() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 40,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  if (input.charCodeAt(peg$currPos) === 10) {\r\n// \t\ts0 = peg$c83;\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts0 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c84); }\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\tif (input.charCodeAt(peg$currPos) === 13) {\r\n// \t\t  s1 = peg$c85;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s1 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c86); }\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  if (input.charCodeAt(peg$currPos) === 10) {\r\n// \t\t\ts2 = peg$c83;\r\n// \t\t\tpeg$currPos++;\r\n// \t\t  } else {\r\n// \t\t\ts2 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c84); }\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\ts1 = [s1, s2];\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseNLS() {\r\n// \t  var s0;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 41,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$parseNL();\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$parseS();\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseEOF() {\r\n// \t  var s0, s1;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 42,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  peg$silentFails++;\r\n// \t  if (input.length > peg$currPos) {\r\n// \t\ts1 = input.charAt(peg$currPos);\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c6); }\r\n// \t  }\r\n// \t  peg$silentFails--;\r\n// \t  if (s1 === peg$FAILED) {\r\n// \t\ts0 = peg$c5;\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseHEX() {\r\n// \t  var s0;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 43,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  if (peg$c87.test(input.charAt(peg$currPos))) {\r\n// \t\ts0 = input.charAt(peg$currPos);\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts0 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c88); }\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseDIGIT_OR_UNDER() {\r\n// \t  var s0, s1;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 44,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  if (peg$c89.test(input.charAt(peg$currPos))) {\r\n// \t\ts0 = input.charAt(peg$currPos);\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts0 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c90); }\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\tif (input.charCodeAt(peg$currPos) === 95) {\r\n// \t\t  s1 = peg$c91;\r\n// \t\t  peg$currPos++;\r\n// \t\t} else {\r\n// \t\t  s1 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c92); }\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c93();\r\n// \t\t}\r\n// \t\ts0 = s1;\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseASCII_BASIC() {\r\n// \t  var s0;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 45,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  if (peg$c94.test(input.charAt(peg$currPos))) {\r\n// \t\ts0 = input.charAt(peg$currPos);\r\n// \t\tpeg$currPos++;\r\n// \t  } else {\r\n// \t\ts0 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c95); }\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseDIGITS() {\r\n// \t  var s0, s1, s2;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 46,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  s1 = [];\r\n// \t  s2 = peg$parseDIGIT_OR_UNDER();\r\n// \t  if (s2 !== peg$FAILED) {\r\n// \t\twhile (s2 !== peg$FAILED) {\r\n// \t\t  s1.push(s2);\r\n// \t\t  s2 = peg$parseDIGIT_OR_UNDER();\r\n// \t\t}\r\n// \t  } else {\r\n// \t\ts1 = peg$c2;\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c96(s1);\r\n// \t  }\r\n// \t  s0 = s1;\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseESCAPED() {\r\n// \t  var s0, s1;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 47,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.substr(peg$currPos, 2) === peg$c97) {\r\n// \t\ts1 = peg$c97;\r\n// \t\tpeg$currPos += 2;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c98); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\tpeg$reportedPos = s0;\r\n// \t\ts1 = peg$c99();\r\n// \t  }\r\n// \t  s0 = s1;\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\tif (input.substr(peg$currPos, 2) === peg$c100) {\r\n// \t\t  s1 = peg$c100;\r\n// \t\t  peg$currPos += 2;\r\n// \t\t} else {\r\n// \t\t  s1 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c101); }\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c102();\r\n// \t\t}\r\n// \t\ts0 = s1;\r\n// \t\tif (s0 === peg$FAILED) {\r\n// \t\t  s0 = peg$currPos;\r\n// \t\t  if (input.substr(peg$currPos, 2) === peg$c103) {\r\n// \t\t\ts1 = peg$c103;\r\n// \t\t\tpeg$currPos += 2;\r\n// \t\t  } else {\r\n// \t\t\ts1 = peg$FAILED;\r\n// \t\t\tif (peg$silentFails === 0) { peg$fail(peg$c104); }\r\n// \t\t  }\r\n// \t\t  if (s1 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c105();\r\n// \t\t  }\r\n// \t\t  s0 = s1;\r\n// \t\t  if (s0 === peg$FAILED) {\r\n// \t\t\ts0 = peg$currPos;\r\n// \t\t\tif (input.substr(peg$currPos, 2) === peg$c106) {\r\n// \t\t\t  s1 = peg$c106;\r\n// \t\t\t  peg$currPos += 2;\r\n// \t\t\t} else {\r\n// \t\t\t  s1 = peg$FAILED;\r\n// \t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c107); }\r\n// \t\t\t}\r\n// \t\t\tif (s1 !== peg$FAILED) {\r\n// \t\t\t  peg$reportedPos = s0;\r\n// \t\t\t  s1 = peg$c108();\r\n// \t\t\t}\r\n// \t\t\ts0 = s1;\r\n// \t\t\tif (s0 === peg$FAILED) {\r\n// \t\t\t  s0 = peg$currPos;\r\n// \t\t\t  if (input.substr(peg$currPos, 2) === peg$c109) {\r\n// \t\t\t\ts1 = peg$c109;\r\n// \t\t\t\tpeg$currPos += 2;\r\n// \t\t\t  } else {\r\n// \t\t\t\ts1 = peg$FAILED;\r\n// \t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c110); }\r\n// \t\t\t  }\r\n// \t\t\t  if (s1 !== peg$FAILED) {\r\n// \t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\ts1 = peg$c111();\r\n// \t\t\t  }\r\n// \t\t\t  s0 = s1;\r\n// \t\t\t  if (s0 === peg$FAILED) {\r\n// \t\t\t\ts0 = peg$currPos;\r\n// \t\t\t\tif (input.substr(peg$currPos, 2) === peg$c112) {\r\n// \t\t\t\t  s1 = peg$c112;\r\n// \t\t\t\t  peg$currPos += 2;\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  s1 = peg$FAILED;\r\n// \t\t\t\t  if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n// \t\t\t\t}\r\n// \t\t\t\tif (s1 !== peg$FAILED) {\r\n// \t\t\t\t  peg$reportedPos = s0;\r\n// \t\t\t\t  s1 = peg$c114();\r\n// \t\t\t\t}\r\n// \t\t\t\ts0 = s1;\r\n// \t\t\t\tif (s0 === peg$FAILED) {\r\n// \t\t\t\t  s0 = peg$currPos;\r\n// \t\t\t\t  if (input.substr(peg$currPos, 2) === peg$c115) {\r\n// \t\t\t\t\ts1 = peg$c115;\r\n// \t\t\t\t\tpeg$currPos += 2;\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\ts1 = peg$FAILED;\r\n// \t\t\t\t\tif (peg$silentFails === 0) { peg$fail(peg$c116); }\r\n// \t\t\t\t  }\r\n// \t\t\t\t  if (s1 !== peg$FAILED) {\r\n// \t\t\t\t\tpeg$reportedPos = s0;\r\n// \t\t\t\t\ts1 = peg$c117();\r\n// \t\t\t\t  }\r\n// \t\t\t\t  s0 = s1;\r\n// \t\t\t\t  if (s0 === peg$FAILED) {\r\n// \t\t\t\t\ts0 = peg$parseESCAPED_UNICODE();\r\n// \t\t\t\t  }\r\n// \t\t\t\t}\r\n// \t\t\t  }\r\n// \t\t\t}\r\n// \t\t  }\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n// \tfunction peg$parseESCAPED_UNICODE() {\r\n// \t  var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n//\r\n// \t  var key    = peg$currPos * 49 + 48,\r\n// \t\t  cached = peg$cache[key];\r\n//\r\n// \t  if (cached) {\r\n// \t\tpeg$currPos = cached.nextPos;\r\n// \t\treturn cached.result;\r\n// \t  }\r\n//\r\n// \t  s0 = peg$currPos;\r\n// \t  if (input.substr(peg$currPos, 2) === peg$c118) {\r\n// \t\ts1 = peg$c118;\r\n// \t\tpeg$currPos += 2;\r\n// \t  } else {\r\n// \t\ts1 = peg$FAILED;\r\n// \t\tif (peg$silentFails === 0) { peg$fail(peg$c119); }\r\n// \t  }\r\n// \t  if (s1 !== peg$FAILED) {\r\n// \t\ts2 = peg$currPos;\r\n// \t\ts3 = peg$parseHEX();\r\n// \t\tif (s3 !== peg$FAILED) {\r\n// \t\t  s4 = peg$parseHEX();\r\n// \t\t  if (s4 !== peg$FAILED) {\r\n// \t\t\ts5 = peg$parseHEX();\r\n// \t\t\tif (s5 !== peg$FAILED) {\r\n// \t\t\t  s6 = peg$parseHEX();\r\n// \t\t\t  if (s6 !== peg$FAILED) {\r\n// \t\t\t\ts7 = peg$parseHEX();\r\n// \t\t\t\tif (s7 !== peg$FAILED) {\r\n// \t\t\t\t  s8 = peg$parseHEX();\r\n// \t\t\t\t  if (s8 !== peg$FAILED) {\r\n// \t\t\t\t\ts9 = peg$parseHEX();\r\n// \t\t\t\t\tif (s9 !== peg$FAILED) {\r\n// \t\t\t\t\t  s10 = peg$parseHEX();\r\n// \t\t\t\t\t  if (s10 !== peg$FAILED) {\r\n// \t\t\t\t\t\ts3 = [s3, s4, s5, s6, s7, s8, s9, s10];\r\n// \t\t\t\t\t\ts2 = s3;\r\n// \t\t\t\t\t  } else {\r\n// \t\t\t\t\t\tpeg$currPos = s2;\r\n// \t\t\t\t\t\ts2 = peg$c2;\r\n// \t\t\t\t\t  }\r\n// \t\t\t\t\t} else {\r\n// \t\t\t\t\t  peg$currPos = s2;\r\n// \t\t\t\t\t  s2 = peg$c2;\r\n// \t\t\t\t\t}\r\n// \t\t\t\t  } else {\r\n// \t\t\t\t\tpeg$currPos = s2;\r\n// \t\t\t\t\ts2 = peg$c2;\r\n// \t\t\t\t  }\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s2;\r\n// \t\t\t\t  s2 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s2;\r\n// \t\t\t\ts2 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s2;\r\n// \t\t\t  s2 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s2;\r\n// \t\t\ts2 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s2;\r\n// \t\t  s2 = peg$c2;\r\n// \t\t}\r\n// \t\tif (s2 !== peg$FAILED) {\r\n// \t\t  peg$reportedPos = s0;\r\n// \t\t  s1 = peg$c120(s2);\r\n// \t\t  s0 = s1;\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  } else {\r\n// \t\tpeg$currPos = s0;\r\n// \t\ts0 = peg$c2;\r\n// \t  }\r\n// \t  if (s0 === peg$FAILED) {\r\n// \t\ts0 = peg$currPos;\r\n// \t\tif (input.substr(peg$currPos, 2) === peg$c121) {\r\n// \t\t  s1 = peg$c121;\r\n// \t\t  peg$currPos += 2;\r\n// \t\t} else {\r\n// \t\t  s1 = peg$FAILED;\r\n// \t\t  if (peg$silentFails === 0) { peg$fail(peg$c122); }\r\n// \t\t}\r\n// \t\tif (s1 !== peg$FAILED) {\r\n// \t\t  s2 = peg$currPos;\r\n// \t\t  s3 = peg$parseHEX();\r\n// \t\t  if (s3 !== peg$FAILED) {\r\n// \t\t\ts4 = peg$parseHEX();\r\n// \t\t\tif (s4 !== peg$FAILED) {\r\n// \t\t\t  s5 = peg$parseHEX();\r\n// \t\t\t  if (s5 !== peg$FAILED) {\r\n// \t\t\t\ts6 = peg$parseHEX();\r\n// \t\t\t\tif (s6 !== peg$FAILED) {\r\n// \t\t\t\t  s3 = [s3, s4, s5, s6];\r\n// \t\t\t\t  s2 = s3;\r\n// \t\t\t\t} else {\r\n// \t\t\t\t  peg$currPos = s2;\r\n// \t\t\t\t  s2 = peg$c2;\r\n// \t\t\t\t}\r\n// \t\t\t  } else {\r\n// \t\t\t\tpeg$currPos = s2;\r\n// \t\t\t\ts2 = peg$c2;\r\n// \t\t\t  }\r\n// \t\t\t} else {\r\n// \t\t\t  peg$currPos = s2;\r\n// \t\t\t  s2 = peg$c2;\r\n// \t\t\t}\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s2;\r\n// \t\t\ts2 = peg$c2;\r\n// \t\t  }\r\n// \t\t  if (s2 !== peg$FAILED) {\r\n// \t\t\tpeg$reportedPos = s0;\r\n// \t\t\ts1 = peg$c120(s2);\r\n// \t\t\ts0 = s1;\r\n// \t\t  } else {\r\n// \t\t\tpeg$currPos = s0;\r\n// \t\t\ts0 = peg$c2;\r\n// \t\t  }\r\n// \t\t} else {\r\n// \t\t  peg$currPos = s0;\r\n// \t\t  s0 = peg$c2;\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  peg$cache[key] = { nextPos: peg$currPos, result: s0 };\r\n//\r\n// \t  return s0;\r\n// \t}\r\n//\r\n//\r\n// \t  var nodes = [];\r\n//\r\n// \t  function genError(err, line, col) {\r\n// \t\treturn null;\r\n// \t  }\r\n//\r\n// \t  function addNode(node) {\r\n// \t\tnodes.push(node);\r\n// \t  }\r\n//\r\n// \t  function node(type, value, line, column, key) {\r\n// \t\tvar obj = { type: type, value: value, line: line(), column: column() };\r\n// \t\tif (key) obj.key = key;\r\n// \t\treturn obj;\r\n// \t  }\r\n//\r\n// \t  function convertCodePoint(str, line, col) {\r\n// \t\tvar num = parseInt(\"0x\" + str);\r\n//\r\n// \t\tif (\r\n// \t\t  !isFinite(num) ||\r\n// \t\t  Math.floor(num) != num ||\r\n// \t\t  num < 0 ||\r\n// \t\t  num > 0x10FFFF ||\r\n// \t\t  (num > 0xD7FF && num < 0xE000)\r\n// \t\t) {\r\n// \t\t  genError(\"Invalid Unicode escape code: \" + str, line, col);\r\n// \t\t} else {\r\n// \t\t  return fromCodePoint(num);\r\n// \t\t}\r\n// \t  }\r\n//\r\n// \t  function fromCodePoint() {\r\n// \t\tvar MAX_SIZE = 0x4000;\r\n// \t\tvar codeUnits = [];\r\n// \t\tvar highSurrogate;\r\n// \t\tvar lowSurrogate;\r\n// \t\tvar index = -1;\r\n// \t\tvar length = arguments.length;\r\n// \t\tif (!length) {\r\n// \t\t  return '';\r\n// \t\t}\r\n// \t\tvar result = '';\r\n// \t\twhile (++index < length) {\r\n// \t\t  var codePoint = Number(arguments[index]);\r\n// \t\t  if (codePoint <= 0xFFFF) { // BMP code point\r\n// \t\t\tcodeUnits.push(codePoint);\r\n// \t\t  } else { // Astral code point; split in surrogate halves\r\n// \t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n// \t\t\tcodePoint -= 0x10000;\r\n// \t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\r\n// \t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\r\n// \t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\r\n// \t\t  }\r\n// \t\t  if (index + 1 == length || codeUnits.length > MAX_SIZE) {\r\n// \t\t\tresult += String.fromCharCode.apply(null, codeUnits);\r\n// \t\t\tcodeUnits.length = 0;\r\n// \t\t  }\r\n// \t\t}\r\n// \t\treturn result;\r\n// \t  }\r\n//\r\n//\r\n// \tpeg$result = peg$startRuleFunction();\r\n//\r\n// \tif (peg$result !== peg$FAILED && peg$currPos === input.length) {\r\n// \t  return peg$result;\r\n// \t} else {\r\n// \t  if (peg$result !== peg$FAILED && peg$currPos < input.length) {\r\n// \t\tpeg$fail({ type: \"end\", description: \"end of input\" });\r\n// \t  }\r\n//\r\n// \t  return null;\r\n// \t}\r\n// }\r\n//\r\n//\r\n// function compile(nodes) {\r\n//   var assignedPaths = [];\r\n//   var valueAssignments = [];\r\n//   var currentPath = \"\";\r\n//   var data = {};\r\n//   var context = data;\r\n//   var arrayMode = false;\r\n//\r\n//   return reduce(nodes);\r\n//\r\n//   function reduce(nodes) {\r\n//     var node;\r\n//     for (var i = 0; i < nodes.length; i++) {\r\n//       node = nodes[i];\r\n//       switch (node.type) {\r\n//       case \"Assign\":\r\n//         assign(node);\r\n//         break;\r\n//       case \"ObjectPath\":\r\n//         setPath(node);\r\n//         break;\r\n//       case \"ArrayPath\":\r\n//         addTableArray(node);\r\n//         break;\r\n//       }\r\n//     }\r\n//\r\n//     return data;\r\n//   }\r\n//\r\n//   function genError(err, line, col) {\r\n//     var ex = new Error(err);\r\n//     ex.line = line;\r\n//     ex.column = col;\r\n// \treturn null;\r\n//   }\r\n//\r\n//   function assign(node) {\r\n//     var key = node.key;\r\n//     var value = node.value;\r\n//     var line = node.line;\r\n//     var column = node.column;\r\n//\r\n//     var fullPath;\r\n//     if (currentPath) {\r\n//       fullPath = currentPath + \".\" + key;\r\n//     } else {\r\n//       fullPath = key;\r\n//     }\r\n//     if (typeof context[key] !== \"undefined\") {\r\n//       genError(\"Cannot redefine existing key '\" + fullPath + \"'.\", line, column);\r\n//     }\r\n//\r\n//     context[key] = reduceValueNode(value);\r\n//\r\n//     if (!pathAssigned(fullPath)) {\r\n//       assignedPaths.push(fullPath);\r\n//       valueAssignments.push(fullPath);\r\n//     }\r\n//   }\r\n//\r\n//\r\n//   function pathAssigned(path) {\r\n//     return assignedPaths.indexOf(path) !== -1;\r\n//   }\r\n//\r\n//   function reduceValueNode(node) {\r\n//     if (node.type === \"Array\") {\r\n//       return reduceArrayWithTypeChecking(node.value);\r\n//     } else if (node.type === \"InlineTable\") {\r\n//       return reduceInlineTableNode(node.value);\r\n//     } else {\r\n//       return node.value;\r\n//     }\r\n//   }\r\n//\r\n//   function reduceInlineTableNode(values) {\r\n//     var obj = {};\r\n//     for (var i = 0; i < values.length; i++) {\r\n//       var val = values[i];\r\n//       if (val.value.type === \"InlineTable\") {\r\n//         obj[val.key] = reduceInlineTableNode(val.value.value);\r\n//       } else if (val.type === \"InlineTableValue\") {\r\n//         obj[val.key] = reduceValueNode(val.value);\r\n//       }\r\n//     }\r\n//\r\n//     return obj;\r\n//   }\r\n//\r\n//   function setPath(node) {\r\n//     var path = node.value;\r\n//     var quotedPath = path.map(quoteDottedString).join(\".\");\r\n//     var line = node.line;\r\n//     var column = node.column;\r\n//\r\n//     if (pathAssigned(quotedPath)) {\r\n//       genError(\"Cannot redefine existing key '\" + path + \"'.\", line, column);\r\n//     }\r\n//     assignedPaths.push(quotedPath);\r\n//     context = deepRef(data, path, {}, line, column);\r\n//     currentPath = path;\r\n//   }\r\n//\r\n//   function addTableArray(node) {\r\n//     var path = node.value;\r\n//     var quotedPath = path.map(quoteDottedString).join(\".\");\r\n//     var line = node.line;\r\n//     var column = node.column;\r\n//\r\n//     if (!pathAssigned(quotedPath)) {\r\n//       assignedPaths.push(quotedPath);\r\n//     }\r\n//     assignedPaths = assignedPaths.filter(function(p) {\r\n//       return p.indexOf(quotedPath) !== 0;\r\n//     });\r\n//     assignedPaths.push(quotedPath);\r\n//     context = deepRef(data, path, [], line, column);\r\n//     currentPath = quotedPath;\r\n//\r\n//     if (context instanceof Array) {\r\n//       var newObj = {};\r\n//       context.push(newObj);\r\n//       context = newObj;\r\n//     } else {\r\n//       genError(\"Cannot redefine existing key '\" + path + \"'.\", line, column);\r\n//     }\r\n//   }\r\n//\r\n//   // Given a path 'a.b.c', create (as necessary) `start.a`,\r\n//   // `start.a.b`, and `start.a.b.c`, assigning `value` to `start.a.b.c`.\r\n//   // If `a` or `b` are arrays and have items in them, the last item in the\r\n//   // array is used as the context for the next sub-path.\r\n//   function deepRef(start, keys, value, line, column) {\r\n//     var traversed = [];\r\n//     var traversedPath = \"\";\r\n//     var path = keys.join(\".\");\r\n//     var ctx = start;\r\n//\r\n//     for (var i = 0; i < keys.length; i++) {\r\n//       var key = keys[i];\r\n//       traversed.push(key);\r\n//       traversedPath = traversed.join(\".\");\r\n//       if (typeof ctx[key] === \"undefined\") {\r\n//         if (i === keys.length - 1) {\r\n//           ctx[key] = value;\r\n//         } else {\r\n//           ctx[key] = {};\r\n//         }\r\n//       } else if (i !== keys.length - 1 && valueAssignments.indexOf(traversedPath) > -1) {\r\n//         // already a non-object value at key, can't be used as part of a new path\r\n//         genError(\"Cannot redefine existing key '\" + traversedPath + \"'.\", line, column);\r\n//       }\r\n//\r\n//       ctx = ctx[key];\r\n//       if (ctx instanceof Array && ctx.length && i < keys.length - 1) {\r\n//         ctx = ctx[ctx.length - 1];\r\n//       }\r\n//     }\r\n//\r\n//     return ctx;\r\n//   }\r\n//\r\n//   function reduceArrayWithTypeChecking(array) {\r\n//     // Ensure that all items in the array are of the same type\r\n//     var firstType = null;\r\n//     for (var i = 0; i < array.length; i++) {\r\n//       var node = array[i];\r\n//       if (firstType === null) {\r\n//         firstType = node.type;\r\n//       } else {\r\n//         if (node.type !== firstType) {\r\n//           genError(\"Cannot add value of type \" + node.type + \" to array of type \" +\r\n//             firstType + \".\", node.line, node.column);\r\n//         }\r\n//       }\r\n//     }\r\n//\r\n//     // Recursively reduce array of nodes into array of the nodes' values\r\n//     return array.map(reduceValueNode);\r\n//   }\r\n//\r\n//   function quoteDottedString(str) {\r\n//     if (str.indexOf(\".\") > -1) {\r\n//       return \"\\\"\" + str + \"\\\"\";\r\n//     } else {\r\n//       return str;\r\n//     }\r\n//   }\r\n// }\r\n"};
jalangiLabel1:
    while (true) {
        try {
            J$.Se(841, '/Users/tzuhan/+research/hyper_enforce/HyperEnforce/3_enforcing/hyperenforce_cases/toml/toml_enforced_compare_jalangi_.js', '/Users/tzuhan/+research/hyper_enforce/HyperEnforce/3_enforcing/hyperenforce_cases/toml/toml_enforced_compare.js');
            J$.N(849, 'con_str_polluted', con_str_polluted, 0);
            J$.N(857, 'ucon_str_toml', ucon_str_toml, 0);
            J$.N(865, 'i', i, 0);
            J$.N(873, 'counter', counter, 0);
            J$.N(881, 'total_monitoring', total_monitoring, 0);
            J$.N(889, 'total_no_monitoring', total_no_monitoring, 0);
            J$.N(897, 'total_exectime', total_exectime, 0);
            J$.N(905, 'normalized_overhead', normalized_overhead, 0);
            J$.N(913, 'node', node, 0);
            var con_str_polluted = J$.X1(25, J$.W(17, 'con_str_polluted', J$.T(9, '', 21, false), con_str_polluted, 3));
            var ucon_str_toml = J$.X1(49, J$.W(41, 'ucon_str_toml', J$.T(33, '', 21, false), ucon_str_toml, 3));
            J$.X1(73, toml_str = J$.W(65, 'toml_str', J$.T(57, '', 21, false), J$.I(typeof toml_str === 'undefined' ? undefined : toml_str), 4));
            J$.X1(121, supp_0 = J$.W(113, 'supp_0', J$.T(105, function (ucon_str_toml) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(81, arguments.callee, this, arguments);
                            arguments = J$.N(89, 'arguments', arguments, 4);
                            ucon_str_toml = J$.N(97, 'ucon_str_toml', ucon_str_toml, 4);
                        } catch (J$e) {
                            J$.Ex(921, J$e);
                        } finally {
                            if (J$.Fr(929))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 81), J$.I(typeof supp_0 === 'undefined' ? undefined : supp_0), 4));
            var i;
            var counter = J$.X1(145, J$.W(137, 'counter', J$.T(129, 0, 22, false), counter, 3));
            var total_monitoring = J$.X1(169, J$.W(161, 'total_monitoring', J$.T(153, 0, 22, false), total_monitoring, 3));
            var total_no_monitoring = J$.X1(193, J$.W(185, 'total_no_monitoring', J$.T(177, 0, 22, false), total_no_monitoring, 3));
            var total_exectime = J$.X1(217, J$.W(209, 'total_exectime', J$.T(201, 0, 22, false), total_exectime, 3));
            var normalized_overhead = J$.X1(241, J$.W(233, 'normalized_overhead', J$.T(225, 0, 22, false), normalized_overhead, 3));
            J$.X1(273, start = J$.W(265, 'start', J$.M(257, J$.R(249, 'Date', Date, 2), 'now', 0)(), J$.I(typeof start === 'undefined' ? undefined : start), 4));
            for (J$.X1(945, i = J$.W(289, 'i', J$.T(281, 1, 22, false), i, 2)); J$.X1(937, J$.C(8, J$.B(10, '<=', J$.R(297, 'i', i, 1), J$.T(305, 1000000, 22, false), 0))); J$.X1(953, J$.B(34, '-', i = J$.W(329, 'i', J$.B(26, '+', J$.U(18, '+', J$.R(321, 'i', i, 1)), J$.T(313, 1, 22, false), 0), i, 2), J$.T(337, 1, 22, false), 0))) {
                J$.X1(361, con_str_polluted = J$.W(353, 'con_str_polluted', J$.T(345, 'undefined', 21, false), con_str_polluted, 2));
                var node;
                J$.X1(393, nomonitor_time0 = J$.W(385, 'nomonitor_time0', J$.M(377, J$.R(369, 'Date', Date, 2), 'now', 0)(), J$.I(typeof nomonitor_time0 === 'undefined' ? undefined : nomonitor_time0), 4));
                J$.X1(417, con_str_polluted = J$.W(409, 'con_str_polluted', J$.T(401, 'yes', 21, false), con_str_polluted, 2));
                J$.X1(465, total_no_monitoring = J$.W(457, 'total_no_monitoring', J$.B(50, '+', J$.R(425, 'total_no_monitoring', total_no_monitoring, 1), J$.B(42, '-', J$.M(441, J$.R(433, 'Date', Date, 2), 'now', 0)(), J$.R(449, 'nomonitor_time0', nomonitor_time0, 2), 0), 0), total_no_monitoring, 2));
                J$.X1(497, monitoring_time0 = J$.W(489, 'monitoring_time0', J$.M(481, J$.R(473, 'Date', Date, 2), 'now', 0)(), J$.I(typeof monitoring_time0 === 'undefined' ? undefined : monitoring_time0), 4));
                J$.X1(537, con_str_polluted = J$.W(529, 'con_str_polluted', J$.F(521, J$.R(505, 'supp_0', supp_0, 2), 0)(J$.R(513, 'ucon_str_toml', ucon_str_toml, 1)), con_str_polluted, 2));
                J$.X1(585, total_monitoring = J$.W(577, 'total_monitoring', J$.B(66, '+', J$.R(545, 'total_monitoring', total_monitoring, 1), J$.B(58, '-', J$.M(561, J$.R(553, 'Date', Date, 2), 'now', 0)(), J$.R(569, 'monitoring_time0', monitoring_time0, 2), 0), 0), total_monitoring, 2));
            }
            J$.X1(625, total_exectime = J$.W(617, 'total_exectime', J$.B(74, '-', J$.M(601, J$.R(593, 'Date', Date, 2), 'now', 0)(), J$.R(609, 'start', start, 2), 0), total_exectime, 2));
            J$.X1(665, total_w_enforcing = J$.W(657, 'total_w_enforcing', J$.B(90, '+', J$.B(82, '-', J$.R(633, 'total_exectime', total_exectime, 1), J$.R(641, 'total_no_monitoring', total_no_monitoring, 1), 0), J$.R(649, 'total_monitoring', total_monitoring, 1), 0), J$.I(typeof total_w_enforcing === 'undefined' ? undefined : total_w_enforcing), 4));
            J$.X1(705, total_wo_enforcing = J$.W(697, 'total_wo_enforcing', J$.B(106, '+', J$.B(98, '-', J$.R(673, 'total_exectime', total_exectime, 1), J$.R(681, 'total_monitoring', total_monitoring, 1), 0), J$.R(689, 'total_no_monitoring', total_no_monitoring, 1), 0), J$.I(typeof total_wo_enforcing === 'undefined' ? undefined : total_wo_enforcing), 4));
            J$.X1(737, J$.M(729, J$.R(713, 'console', console, 2), 'log', 0)(`Total execution time w/ enforcing:  X1 = ${ J$.R(721, 'total_w_enforcing', total_w_enforcing, 2) } ms`));
            J$.X1(769, J$.M(761, J$.R(745, 'console', console, 2), 'log', 0)(`Total execution time w/o enforcing: X2 = ${ J$.R(753, 'total_wo_enforcing', total_wo_enforcing, 2) } ms`));
            J$.X1(833, J$.M(825, J$.R(777, 'console', console, 2), 'log', 0)(`overhead = ${ J$.B(122, '*', J$.M(809, J$.B(114, '/', J$.R(785, 'total_w_enforcing', total_w_enforcing, 2), J$.R(793, 'total_wo_enforcing', total_wo_enforcing, 2), 0), 'toFixed', 0)(J$.T(801, 4, 22, false)), J$.T(817, 100, 22, false), 0) } %`));
        } catch (J$e) {
            J$.Ex(961, J$e);
        } finally {
            if (J$.Sr(969)) {
                J$.L();
                continue jalangiLabel1;
            } else {
                J$.L();
                break jalangiLabel1;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
